
BaseStationCenter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000201c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000201c  000020d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000375  00800066  00800066  000020d6  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000020d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000864  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000182  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003a8  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009dbc  00000000  00000000  00002e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b9a  00000000  00000000  0000cc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001b1e  00000000  00000000  0000e7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000978  00000000  00000000  0001030c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020b9  00000000  00000000  00010c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000389e  00000000  00000000  00012d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000960  00000000  00000000  000165db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
}

void Message::sendBaseGetStatusPacket()
{
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	//return (crc);
//}

void Message::constructBaseGetStatusPacket()
{
	baseGetStatusPacket.frameHeader = 0x7e;
       8:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__vector_2>
	baseGetStatusPacket.messageType = 1;
       c:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_3>
	baseGetStatusPacket.frameTrailer = 0x81;
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	
	unsigned char* packetPointer = (unsigned char*)&baseGetStatusPacket;
	int len = sizeof(BaseGetStatusPacket)-4;

	packetPointer++;
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
	int crc = calculateCRC(packetPointer, len);
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_7>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

	baseGetStatusPacket.checksum[0] = crc & 0xFF;
	baseGetStatusPacket.checksum[1] = (crc>>8) & 0xFF;
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

void Message::sendBaseGetStatusPacket()
{
	constructBaseGetStatusPacket();
	
	serial.sendPacket((char*)&baseGetStatusPacket, sizeof(struct BaseGetStatusPacket));
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	7e 0c       	add	r7, r14

00000056 <__ctors_end>:
      56:	92 0c       	add	r9, r2

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d8 e0       	ldi	r29, 0x08	; 8
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	10 e0       	ldi	r17, 0x00	; 0
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	ec e1       	ldi	r30, 0x1C	; 28
      6c:	f0 e2       	ldi	r31, 0x20	; 32
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	a6 36       	cpi	r26, 0x66	; 102
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	23 e0       	ldi	r18, 0x03	; 3
      7c:	a6 e6       	ldi	r26, 0x66	; 102
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	ab 3d       	cpi	r26, 0xDB	; 219
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	c6 e5       	ldi	r28, 0x56	; 86
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	22 97       	sbiw	r28, 0x02	; 2
      94:	fe 01       	movw	r30, r28
      96:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__tablejump__>
      9a:	c4 35       	cpi	r28, 0x54	; 84
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 94 0c 	call	0x1928	; 0x1928 <main>
      a4:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_ZN7ADF7020C1Ev>:
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
      ac:	fc 01       	movw	r30, r24
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      ae:	12 82       	std	Z+2, r1	; 0x02
      b0:	14 82       	std	Z+4, r1	; 0x04
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
      b2:	15 82       	std	Z+5, r1	; 0x05
      b4:	16 82       	std	Z+6, r1	; 0x06
      b6:	17 82       	std	Z+7, r1	; 0x07
      b8:	10 86       	std	Z+8, r1	; 0x08
      ba:	11 86       	std	Z+9, r1	; 0x09
      bc:	12 86       	std	Z+10, r1	; 0x0a
      be:	13 86       	std	Z+11, r1	; 0x0b
      c0:	11 82       	std	Z+1, r1	; 0x01
      c2:	08 95       	ret

000000c4 <_ZN7ADF7020D1Ev>:
      c4:	08 95       	ret

000000c6 <_ZN7ADF702018adf7020_InitializeEv>:
      c6:	ac 98       	cbi	0x15, 4	; 21
      c8:	00 00       	nop
      ca:	ac 9a       	sbi	0x15, 4	; 21
      cc:	fc 01       	movw	r30, r24
		S_clk_WR(1);
      ce:	80 81       	ld	r24, Z
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	88 23       	and	r24, r24
      d2:	09 f4       	brne	.+2      	; 0xd6 <_ZN7ADF702018adf7020_InitializeEv+0x10>
      d4:	b9 c2       	rjmp	.+1394   	; 0x648 <_ZN7ADF702018adf7020_InitializeEv+0x582>
		_delay_us(5);
		regData <<= 1;
      d6:	8a eb       	ldi	r24, 0xBA	; 186
      d8:	81 bb       	out	0x11, r24	; 17
      da:	ae 9a       	sbi	0x15, 6	; 21
      dc:	ad 98       	cbi	0x15, 5	; 21
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
      de:	97 9a       	sbi	0x12, 7	; 18
      e0:	00 00       	nop
      e2:	85 b3       	in	r24, 0x15	; 21
      e4:	80 68       	ori	r24, 0x80	; 128
      e6:	88 bb       	out	0x18, r24	; 24
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
      e8:	84 e7       	ldi	r24, 0x74	; 116
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
      ea:	90 e4       	ldi	r25, 0x40	; 64
      ec:	90 93 69 00 	sts	0x0069, r25
      f0:	80 93 68 00 	sts	0x0068, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	8b e2       	ldi	r24, 0x2B	; 43
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 6b 00 	sts	0x006B, r25
      fc:	80 93 6a 00 	sts	0x006A, r24
	{
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
     100:	10 92 6d 00 	sts	0x006D, r1
     104:	10 92 6c 00 	sts	0x006C, r1
     108:	ac 01       	movw	r20, r24
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	90 93 6f 00 	sts	0x006F, r25
     112:	80 93 6e 00 	sts	0x006E, r24
			ToggleLED(0);
		
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	90 93 71 00 	sts	0x0071, r25
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     11e:	80 93 70 00 	sts	0x0070, r24
     122:	80 91 6c 00 	lds	r24, 0x006C
     126:	90 91 6d 00 	lds	r25, 0x006D
     12a:	81 70       	andi	r24, 0x01	; 1
     12c:	99 27       	eor	r25, r25
     12e:	8e 60       	ori	r24, 0x0E	; 14
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	ba 2f       	mov	r27, r26
     136:	a9 2f       	mov	r26, r25
     138:	98 2f       	mov	r25, r24
     13a:	88 27       	eor	r24, r24
     13c:	55 27       	eor	r21, r21
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	84 2b       	or	r24, r20
     144:	95 2b       	or	r25, r21
     146:	a6 2b       	or	r26, r22
     148:	b7 2b       	or	r27, r23
     14a:	3f e0       	ldi	r19, 0x0F	; 15
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	aa 1f       	adc	r26, r26
     152:	bb 1f       	adc	r27, r27
     154:	3a 95       	dec	r19
     156:	d1 f7       	brne	.-12     	; 0x14c <_ZN7ADF702018adf7020_InitializeEv+0x86>
     158:	40 91 68 00 	lds	r20, 0x0068
     15c:	50 91 69 00 	lds	r21, 0x0069
     160:	5f 77       	andi	r21, 0x7F	; 127
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	84 2b       	or	r24, r20
     168:	95 2b       	or	r25, r21
     16a:	a6 2b       	or	r26, r22
     16c:	b7 2b       	or	r27, r23
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	aa 1f       	adc	r26, r26
     174:	bb 1f       	adc	r27, r27
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	aa 1f       	adc	r26, r26
     17c:	bb 1f       	adc	r27, r27
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	aa 1f       	adc	r26, r26
     184:	bb 1f       	adc	r27, r27
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	aa 1f       	adc	r26, r26
     18c:	bb 1f       	adc	r27, r27
     18e:	ab 98       	cbi	0x15, 3	; 21
     190:	a8 98       	cbi	0x15, 0	; 21
     192:	30 e2       	ldi	r19, 0x20	; 32
     194:	25 b3       	in	r18, 0x15	; 21
     196:	2b 7f       	andi	r18, 0xFB	; 251
     198:	ac 01       	movw	r20, r24
     19a:	bd 01       	movw	r22, r26
     19c:	44 27       	eor	r20, r20
     19e:	77 fd       	sbrc	r23, 7
     1a0:	43 95       	inc	r20
     1a2:	55 27       	eor	r21, r21
     1a4:	66 27       	eor	r22, r22
     1a6:	77 27       	eor	r23, r23
     1a8:	44 0f       	add	r20, r20
     1aa:	44 0f       	add	r20, r20
     1ac:	42 2b       	or	r20, r18
     1ae:	45 bb       	out	0x15, r20	; 21
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     1b0:	a8 9a       	sbi	0x15, 0	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN7ADF702018adf7020_InitializeEv+0xee>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_ZN7ADF702018adf7020_InitializeEv+0xf0>
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     1b6:	00 00       	nop
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	aa 1f       	adc	r26, r26
     1be:	bb 1f       	adc	r27, r27
     1c0:	a8 98       	cbi	0x15, 0	; 21
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN7ADF702018adf7020_InitializeEv+0xfe>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_ZN7ADF702018adf7020_InitializeEv+0x100>
     1c6:	00 00       	nop
     1c8:	31 50       	subi	r19, 0x01	; 1
     1ca:	21 f7       	brne	.-56     	; 0x194 <_ZN7ADF702018adf7020_InitializeEv+0xce>
     1cc:	ab 9a       	sbi	0x15, 3	; 21
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN7ADF702018adf7020_InitializeEv+0x10a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN7ADF702018adf7020_InitializeEv+0x10c>
		S_clk_WR(1);
     1d2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d4:	ab 98       	cbi	0x15, 3	; 21
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(5);
		regData <<= 1;
     1da:	90 93 75 00 	sts	0x0075, r25
     1de:	80 93 74 00 	sts	0x0074, r24
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     1e2:	10 92 77 00 	sts	0x0077, r1
     1e6:	10 92 76 00 	sts	0x0076, r1
     1ea:	10 92 79 00 	sts	0x0079, r1
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     1ee:	10 92 78 00 	sts	0x0078, r1
     1f2:	10 92 7b 00 	sts	0x007B, r1
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     1f6:	10 92 7a 00 	sts	0x007A, r1
		_delay_ms(300);
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
     1fa:	10 92 7d 00 	sts	0x007D, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	10 92 7c 00 	sts	0x007C, r1
     202:	90 93 7f 00 	sts	0x007F, r25
     206:	80 93 7e 00 	sts	0x007E, r24
     20a:	85 e0       	ldi	r24, 0x05	; 5
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	90 93 81 00 	sts	0x0081, r25
void ADF7020::ADF_Program_Check(void)
{
	int i;
	unsigned long  data_reg;
	
	for (i=1;i<=5;i++)
     212:	80 93 80 00 	sts	0x0080, r24
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
		
		_delay_ms(300);
	};
	resetLED(0);
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 83 00 	sts	0x0083, r25
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     21e:	80 93 82 00 	sts	0x0082, r24
     222:	10 92 85 00 	sts	0x0085, r1
     226:	10 92 84 00 	sts	0x0084, r1
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     22a:	ab 98       	cbi	0x15, 3	; 21
     22c:	a8 98       	cbi	0x15, 0	; 21
     22e:	30 e2       	ldi	r19, 0x20	; 32
     230:	81 e2       	ldi	r24, 0x21	; 33
     232:	90 e8       	ldi	r25, 0x80	; 128
     234:	a5 e3       	ldi	r26, 0x35	; 53
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	25 b3       	in	r18, 0x15	; 21
     23a:	2b 7f       	andi	r18, 0xFB	; 251
     23c:	ac 01       	movw	r20, r24
     23e:	bd 01       	movw	r22, r26
     240:	44 27       	eor	r20, r20
     242:	77 fd       	sbrc	r23, 7
     244:	43 95       	inc	r20
     246:	55 27       	eor	r21, r21
     248:	66 27       	eor	r22, r22
     24a:	77 27       	eor	r23, r23
     24c:	44 0f       	add	r20, r20
     24e:	44 0f       	add	r20, r20
     250:	42 2b       	or	r20, r18
     252:	45 bb       	out	0x15, r20	; 21
     254:	a8 9a       	sbi	0x15, 0	; 21
     256:	00 c0       	rjmp	.+0      	; 0x258 <_ZN7ADF702018adf7020_InitializeEv+0x192>
     258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN7ADF702018adf7020_InitializeEv+0x194>
     25a:	00 00       	nop
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	a8 98       	cbi	0x15, 0	; 21
     266:	00 c0       	rjmp	.+0      	; 0x268 <_ZN7ADF702018adf7020_InitializeEv+0x1a2>
     268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN7ADF702018adf7020_InitializeEv+0x1a4>
     26a:	00 00       	nop
     26c:	31 50       	subi	r19, 0x01	; 1
     26e:	21 f7       	brne	.-56     	; 0x238 <_ZN7ADF702018adf7020_InitializeEv+0x172>
     270:	ab 9a       	sbi	0x15, 3	; 21
     272:	00 c0       	rjmp	.+0      	; 0x274 <_ZN7ADF702018adf7020_InitializeEv+0x1ae>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_ZN7ADF702018adf7020_InitializeEv+0x1b0>
     276:	00 00       	nop
     278:	ab 98       	cbi	0x15, 3	; 21
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 9b 00 	sts	0x009B, r25
     282:	80 93 9a 00 	sts	0x009A, r24
     286:	10 92 9d 00 	sts	0x009D, r1
     28a:	10 92 9c 00 	sts	0x009C, r1
     28e:	10 92 9f 00 	sts	0x009F, r1
     292:	10 92 9e 00 	sts	0x009E, r1
     296:	8f e3       	ldi	r24, 0x3F	; 63
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 a1 00 	sts	0x00A1, r25
     29e:	80 93 a0 00 	sts	0x00A0, r24
     2a2:	81 e2       	ldi	r24, 0x21	; 33
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 a3 00 	sts	0x00A3, r25
     2aa:	80 93 a2 00 	sts	0x00A2, r24
     2ae:	10 92 a5 00 	sts	0x00A5, r1
     2b2:	10 92 a4 00 	sts	0x00A4, r1
     2b6:	10 92 a7 00 	sts	0x00A7, r1
     2ba:	10 92 a6 00 	sts	0x00A6, r1

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	90 e0       	ldi	r25, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     2c2:	90 93 a9 00 	sts	0x00A9, r25
     2c6:	80 93 a8 00 	sts	0x00A8, r24
     2ca:	ab 98       	cbi	0x15, 3	; 21
     2cc:	a8 98       	cbi	0x15, 0	; 21
     2ce:	25 b3       	in	r18, 0x15	; 21
     2d0:	2b 7f       	andi	r18, 0xFB	; 251
     2d2:	30 e2       	ldi	r19, 0x20	; 32
     2d4:	82 e1       	ldi	r24, 0x12	; 18
     2d6:	9e ef       	ldi	r25, 0xFE	; 254
     2d8:	a0 e1       	ldi	r26, 0x10	; 16
     2da:	b0 ec       	ldi	r27, 0xC0	; 192
     2dc:	44 e0       	ldi	r20, 0x04	; 4
		S_clk_WR(1);
     2de:	0c c0       	rjmp	.+24     	; 0x2f8 <_ZN7ADF702018adf7020_InitializeEv+0x232>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e0:	25 b3       	in	r18, 0x15	; 21
     2e2:	2b 7f       	andi	r18, 0xFB	; 251
     2e4:	ac 01       	movw	r20, r24
		_delay_us(5);
		regData <<= 1;
     2e6:	bd 01       	movw	r22, r26
     2e8:	44 27       	eor	r20, r20
     2ea:	77 fd       	sbrc	r23, 7
     2ec:	43 95       	inc	r20
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     2ee:	55 27       	eor	r21, r21
     2f0:	66 27       	eor	r22, r22
     2f2:	77 27       	eor	r23, r23
     2f4:	44 0f       	add	r20, r20
     2f6:	44 0f       	add	r20, r20
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     2f8:	42 2b       	or	r20, r18
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     2fa:	45 bb       	out	0x15, r20	; 21
     2fc:	a8 9a       	sbi	0x15, 0	; 21
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <_ZN7ADF702018adf7020_InitializeEv+0x23a>
     300:	00 c0       	rjmp	.+0      	; 0x302 <_ZN7ADF702018adf7020_InitializeEv+0x23c>
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     302:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	aa 1f       	adc	r26, r26
     30a:	bb 1f       	adc	r27, r27
     30c:	a8 98       	cbi	0x15, 0	; 21
     30e:	00 c0       	rjmp	.+0      	; 0x310 <_ZN7ADF702018adf7020_InitializeEv+0x24a>
	resetLED(0);
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
     310:	00 c0       	rjmp	.+0      	; 0x312 <_ZN7ADF702018adf7020_InitializeEv+0x24c>
     312:	00 00       	nop
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
     314:	31 50       	subi	r19, 0x01	; 1
     316:	21 f7       	brne	.-56     	; 0x2e0 <_ZN7ADF702018adf7020_InitializeEv+0x21a>
     318:	ab 9a       	sbi	0x15, 3	; 21
     31a:	00 c0       	rjmp	.+0      	; 0x31c <_ZN7ADF702018adf7020_InitializeEv+0x256>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <_ZN7ADF702018adf7020_InitializeEv+0x258>
		
		ADF_Regs.R0_N.bit1.MUXOUT =0;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);;
     31e:	00 00       	nop
     320:	ab 98       	cbi	0x15, 3	; 21
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	90 e0       	ldi	r25, 0x00	; 0
		ADF_Regs.R0_N.bit1.MUXOUT =1;
		R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
		Set_Register(data_reg);
		_delay_ms(1);
		if( (PIND & 0x04) >> 2)
			ToggleLED(0);
     326:	90 93 c2 00 	sts	0x00C2, r25
     32a:	80 93 c1 00 	sts	0x00C1, r24
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
     32e:	90 93 c4 00 	sts	0x00C4, r25
	//ADF_ReadBack_Format(SILICON_REV);
}
     332:	80 93 c3 00 	sts	0x00C3, r24
     336:	81 e2       	ldi	r24, 0x21	; 33
	ADF_Regs.R0_N.bit1.MUXOUT =3;
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
	Set_Register(data_reg);
	_delay_ms(1);
	if( (PIND & 0x04) >> 2)
		setLED(0);
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	90 93 c6 00 	sts	0x00C6, r25
	//R3 Setting
	ADF_Regs.R3_ReceiverCLK.bit1.BBOS_CLK_Divide =2;		//2  for 9.6k bitrate and 8  for 14.71k
	ADF_Regs.R3_ReceiverCLK.bit1.DEMOD_CLK_Divide =2;
	

	ADF_Regs.R3_ReceiverCLK.bit1.CDR_CLK_Divide =33;		//26 for 9.6k bitrate and 17 for 14.71k
     33e:	80 93 c5 00 	sts	0x00C5, r24

	ADF_Regs.R3_ReceiverCLK.bit1.SEQ_CLK_Divide =200;
     342:	88 ec       	ldi	r24, 0xC8	; 200
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 c8 00 	sts	0x00C8, r25
     34a:	80 93 c7 00 	sts	0x00C7, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     34e:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     350:	a8 98       	cbi	0x15, 0	; 21
     352:	30 e2       	ldi	r19, 0x20	; 32
     354:	83 ea       	ldi	r24, 0xA3	; 163
     356:	91 e2       	ldi	r25, 0x21	; 33
     358:	a8 ec       	ldi	r26, 0xC8	; 200
     35a:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     35c:	25 b3       	in	r18, 0x15	; 21
     35e:	2b 7f       	andi	r18, 0xFB	; 251
     360:	ac 01       	movw	r20, r24
     362:	bd 01       	movw	r22, r26
     364:	44 27       	eor	r20, r20
     366:	77 fd       	sbrc	r23, 7
     368:	43 95       	inc	r20
     36a:	55 27       	eor	r21, r21
     36c:	66 27       	eor	r22, r22
     36e:	77 27       	eor	r23, r23
     370:	44 0f       	add	r20, r20
     372:	44 0f       	add	r20, r20
     374:	42 2b       	or	r20, r18
     376:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     378:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	00 c0       	rjmp	.+0      	; 0x37c <_ZN7ADF702018adf7020_InitializeEv+0x2b6>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <_ZN7ADF702018adf7020_InitializeEv+0x2b8>
     37e:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	aa 1f       	adc	r26, r26
     386:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     388:	a8 98       	cbi	0x15, 0	; 21
     38a:	00 c0       	rjmp	.+0      	; 0x38c <_ZN7ADF702018adf7020_InitializeEv+0x2c6>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <_ZN7ADF702018adf7020_InitializeEv+0x2c8>
     38e:	00 00       	nop
     390:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     392:	21 f7       	brne	.-56     	; 0x35c <_ZN7ADF702018adf7020_InitializeEv+0x296>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     394:	ab 9a       	sbi	0x15, 3	; 21
     396:	00 c0       	rjmp	.+0      	; 0x398 <_ZN7ADF702018adf7020_InitializeEv+0x2d2>
     398:	00 c0       	rjmp	.+0      	; 0x39a <_ZN7ADF702018adf7020_InitializeEv+0x2d4>
     39a:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     39c:	ab 98       	cbi	0x15, 3	; 21

	//_delay_ms(1);


	//R4 Setting
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Select =1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 cd 00 	sts	0x00CD, r25
     3a6:	80 93 cc 00 	sts	0x00CC, r24
	
	ADF_Regs.R4_Demod_Setup.bit1.PostDemod_BW =5; //5;
     3aa:	25 e0       	ldi	r18, 0x05	; 5
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	30 93 cf 00 	sts	0x00CF, r19
     3b2:	20 93 ce 00 	sts	0x00CE, r18
	ADF_Regs.R4_Demod_Setup.bit1.Demod_Lock_Timeout =0;
     3b6:	10 92 d1 00 	sts	0x00D1, r1
     3ba:	10 92 d0 00 	sts	0x00D0, r1
	ADF_Regs.R4_Demod_Setup.bit1.Sync_Mode =1;
     3be:	90 93 d3 00 	sts	0x00D3, r25
     3c2:	80 93 d2 00 	sts	0x00D2, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     3c6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     3c8:	a8 98       	cbi	0x15, 0	; 21
     3ca:	30 e2       	ldi	r19, 0x20	; 32
     3cc:	84 e5       	ldi	r24, 0x54	; 84
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	a0 e0       	ldi	r26, 0x00	; 0
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     3d4:	25 b3       	in	r18, 0x15	; 21
     3d6:	2b 7f       	andi	r18, 0xFB	; 251
     3d8:	ac 01       	movw	r20, r24
     3da:	bd 01       	movw	r22, r26
     3dc:	44 27       	eor	r20, r20
     3de:	77 fd       	sbrc	r23, 7
     3e0:	43 95       	inc	r20
     3e2:	55 27       	eor	r21, r21
     3e4:	66 27       	eor	r22, r22
     3e6:	77 27       	eor	r23, r23
     3e8:	44 0f       	add	r20, r20
     3ea:	44 0f       	add	r20, r20
     3ec:	42 2b       	or	r20, r18
     3ee:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     3f0:	a8 9a       	sbi	0x15, 0	; 21
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN7ADF702018adf7020_InitializeEv+0x32e>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <_ZN7ADF702018adf7020_InitializeEv+0x330>
     3f6:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	aa 1f       	adc	r26, r26
     3fe:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     400:	a8 98       	cbi	0x15, 0	; 21
     402:	00 c0       	rjmp	.+0      	; 0x404 <_ZN7ADF702018adf7020_InitializeEv+0x33e>
     404:	00 c0       	rjmp	.+0      	; 0x406 <_ZN7ADF702018adf7020_InitializeEv+0x340>
     406:	00 00       	nop
     408:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     40a:	21 f7       	brne	.-56     	; 0x3d4 <_ZN7ADF702018adf7020_InitializeEv+0x30e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     40c:	ab 9a       	sbi	0x15, 3	; 21
     40e:	00 c0       	rjmp	.+0      	; 0x410 <_ZN7ADF702018adf7020_InitializeEv+0x34a>
     410:	00 c0       	rjmp	.+0      	; 0x412 <_ZN7ADF702018adf7020_InitializeEv+0x34c>
     412:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     414:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0x00214);

	//_delay_ms(1);

	//R5 Setting
	ADF_Regs.R5_Sync_Word.bit1.Sync_Length =3;
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 d8 00 	sts	0x00D8, r25
     41e:	80 93 d7 00 	sts	0x00D7, r24
	ADF_Regs.R5_Sync_Word.bit1.Match_Tolerance =0;
     422:	10 92 da 00 	sts	0x00DA, r1
     426:	10 92 d9 00 	sts	0x00D9, r1
	ADF_Regs.R5_Sync_Word.bit1.Sync_Word_Byte =0x94D2AD;//same as 0x123456
     42a:	8d ea       	ldi	r24, 0xAD	; 173
     42c:	92 ed       	ldi	r25, 0xD2	; 210
     42e:	a4 e9       	ldi	r26, 0x94	; 148
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	80 93 db 00 	sts	0x00DB, r24
     436:	90 93 dc 00 	sts	0x00DC, r25
     43a:	a0 93 dd 00 	sts	0x00DD, r26
     43e:	b0 93 de 00 	sts	0x00DE, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     442:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     444:	a8 98       	cbi	0x15, 0	; 21
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     446:	25 b3       	in	r18, 0x15	; 21
     448:	2b 7f       	andi	r18, 0xFB	; 251
     44a:	30 e2       	ldi	r19, 0x20	; 32
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	9d ea       	ldi	r25, 0xAD	; 173
     450:	a2 ed       	ldi	r26, 0xD2	; 210
     452:	b4 e9       	ldi	r27, 0x94	; 148
     454:	44 e0       	ldi	r20, 0x04	; 4
     456:	0c c0       	rjmp	.+24     	; 0x470 <_ZN7ADF702018adf7020_InitializeEv+0x3aa>
     458:	25 b3       	in	r18, 0x15	; 21
     45a:	2b 7f       	andi	r18, 0xFB	; 251
     45c:	ac 01       	movw	r20, r24
     45e:	bd 01       	movw	r22, r26
     460:	44 27       	eor	r20, r20
     462:	77 fd       	sbrc	r23, 7
     464:	43 95       	inc	r20
     466:	55 27       	eor	r21, r21
     468:	66 27       	eor	r22, r22
     46a:	77 27       	eor	r23, r23
     46c:	44 0f       	add	r20, r20
     46e:	44 0f       	add	r20, r20
     470:	42 2b       	or	r20, r18
     472:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     474:	a8 9a       	sbi	0x15, 0	; 21
     476:	00 c0       	rjmp	.+0      	; 0x478 <_ZN7ADF702018adf7020_InitializeEv+0x3b2>
     478:	00 c0       	rjmp	.+0      	; 0x47a <_ZN7ADF702018adf7020_InitializeEv+0x3b4>
     47a:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     484:	a8 98       	cbi	0x15, 0	; 21
     486:	00 c0       	rjmp	.+0      	; 0x488 <_ZN7ADF702018adf7020_InitializeEv+0x3c2>
     488:	00 c0       	rjmp	.+0      	; 0x48a <_ZN7ADF702018adf7020_InitializeEv+0x3c4>
     48a:	00 00       	nop
     48c:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     48e:	21 f7       	brne	.-56     	; 0x458 <_ZN7ADF702018adf7020_InitializeEv+0x392>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     490:	ab 9a       	sbi	0x15, 3	; 21
     492:	00 c0       	rjmp	.+0      	; 0x494 <_ZN7ADF702018adf7020_InitializeEv+0x3ce>
     494:	00 c0       	rjmp	.+0      	; 0x496 <_ZN7ADF702018adf7020_InitializeEv+0x3d0>
     496:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     498:	ab 98       	cbi	0x15, 3	; 21
	//Set_Register(0xAAAA15);
	//Set_Register(0x12345635);

	//_delay_ms(1);
	//R6 Setting
	ADF_Regs.R6_Correlator_Demod.bit1.Discrimin_BW =125;//0x0FA;	//110 for 19.2K deviation and 0x46 for 29K
     49a:	8d e7       	ldi	r24, 0x7D	; 125
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	90 93 e1 00 	sts	0x00E1, r25
     4a2:	80 93 e0 00 	sts	0x00E0, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Dot_Product =0;		//0  for 19.2K deviation and 1    for 29K
     4a6:	10 92 e3 00 	sts	0x00E3, r1
     4aa:	10 92 e2 00 	sts	0x00E2, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Mode =0;
     4ae:	10 92 e5 00 	sts	0x00E5, r1
     4b2:	10 92 e4 00 	sts	0x00E4, r1
	ADF_Regs.R6_Correlator_Demod.bit1.LNA_Current =0;
     4b6:	10 92 e7 00 	sts	0x00E7, r1
     4ba:	10 92 e6 00 	sts	0x00E6, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Mixer_Linearity =0;
     4be:	10 92 e9 00 	sts	0x00E9, r1
     4c2:	10 92 e8 00 	sts	0x00E8, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterCal =0;
     4c6:	10 92 eb 00 	sts	0x00EB, r1
     4ca:	10 92 ea 00 	sts	0x00EA, r1
	ADF_Regs.R6_Correlator_Demod.bit1.IF_FilterDivider =0x190;
     4ce:	80 e9       	ldi	r24, 0x90	; 144
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	90 93 ed 00 	sts	0x00ED, r25
     4d6:	80 93 ec 00 	sts	0x00EC, r24
	ADF_Regs.R6_Correlator_Demod.bit1.RxData_InvertBit =1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 ef 00 	sts	0x00EF, r25
     4e2:	80 93 ee 00 	sts	0x00EE, r24
	ADF_Regs.R6_Correlator_Demod.bit1.Demod_ResetBit =0;
     4e6:	10 92 f1 00 	sts	0x00F1, r1
     4ea:	10 92 f0 00 	sts	0x00F0, r1
	ADF_Regs.R6_Correlator_Demod.bit1.Cdr_ResetBit =0;
     4ee:	10 92 f3 00 	sts	0x00F3, r1
     4f2:	10 92 f2 00 	sts	0x00F2, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     4f6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     4f8:	a8 98       	cbi	0x15, 0	; 21
     4fa:	30 e2       	ldi	r19, 0x20	; 32
     4fc:	86 ed       	ldi	r24, 0xD6	; 214
     4fe:	97 e0       	ldi	r25, 0x07	; 7
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b9 e3       	ldi	r27, 0x39	; 57
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     504:	25 b3       	in	r18, 0x15	; 21
     506:	2b 7f       	andi	r18, 0xFB	; 251
     508:	ac 01       	movw	r20, r24
     50a:	bd 01       	movw	r22, r26
     50c:	44 27       	eor	r20, r20
     50e:	77 fd       	sbrc	r23, 7
     510:	43 95       	inc	r20
     512:	55 27       	eor	r21, r21
     514:	66 27       	eor	r22, r22
     516:	77 27       	eor	r23, r23
     518:	44 0f       	add	r20, r20
     51a:	44 0f       	add	r20, r20
     51c:	42 2b       	or	r20, r18
     51e:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     520:	a8 9a       	sbi	0x15, 0	; 21
     522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN7ADF702018adf7020_InitializeEv+0x45e>
     524:	00 c0       	rjmp	.+0      	; 0x526 <_ZN7ADF702018adf7020_InitializeEv+0x460>
     526:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	aa 1f       	adc	r26, r26
     52e:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     530:	a8 98       	cbi	0x15, 0	; 21
     532:	00 c0       	rjmp	.+0      	; 0x534 <_ZN7ADF702018adf7020_InitializeEv+0x46e>
     534:	00 c0       	rjmp	.+0      	; 0x536 <_ZN7ADF702018adf7020_InitializeEv+0x470>
     536:	00 00       	nop
     538:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     53a:	21 f7       	brne	.-56     	; 0x504 <_ZN7ADF702018adf7020_InitializeEv+0x43e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     53c:	ab 9a       	sbi	0x15, 3	; 21
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_ZN7ADF702018adf7020_InitializeEv+0x47a>
     540:	00 c0       	rjmp	.+0      	; 0x542 <_ZN7ADF702018adf7020_InitializeEv+0x47c>
     542:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     544:	ab 98       	cbi	0x15, 3	; 21
//Set_Register(data_reg);
//Set_Register(0x39000FA6);
//Set_Register(0x19004586);

	//R11 Setting
	ADF_Regs.R11_AFC.bit1.AFC_ScaleCoefficient =0x01a3;
     546:	83 ea       	ldi	r24, 0xA3	; 163
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	90 93 33 01 	sts	0x0133, r25
     54e:	80 93 32 01 	sts	0x0132, r24
	ADF_Regs.R11_AFC.bit1.AFC_enableBit =1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	90 93 35 01 	sts	0x0135, r25
     55a:	80 93 34 01 	sts	0x0134, r24
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     55e:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     560:	a8 98       	cbi	0x15, 0	; 21
     562:	30 e2       	ldi	r19, 0x20	; 32
     564:	8b e3       	ldi	r24, 0x3B	; 59
     566:	9a e1       	ldi	r25, 0x1A	; 26
     568:	a0 e1       	ldi	r26, 0x10	; 16
     56a:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     56c:	25 b3       	in	r18, 0x15	; 21
     56e:	2b 7f       	andi	r18, 0xFB	; 251
     570:	ac 01       	movw	r20, r24
     572:	bd 01       	movw	r22, r26
     574:	44 27       	eor	r20, r20
     576:	77 fd       	sbrc	r23, 7
     578:	43 95       	inc	r20
     57a:	55 27       	eor	r21, r21
     57c:	66 27       	eor	r22, r22
     57e:	77 27       	eor	r23, r23
     580:	44 0f       	add	r20, r20
     582:	44 0f       	add	r20, r20
     584:	42 2b       	or	r20, r18
     586:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     588:	a8 9a       	sbi	0x15, 0	; 21
     58a:	00 c0       	rjmp	.+0      	; 0x58c <_ZN7ADF702018adf7020_InitializeEv+0x4c6>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <_ZN7ADF702018adf7020_InitializeEv+0x4c8>
     58e:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 1f       	adc	r26, r26
     596:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     598:	a8 98       	cbi	0x15, 0	; 21
     59a:	00 c0       	rjmp	.+0      	; 0x59c <_ZN7ADF702018adf7020_InitializeEv+0x4d6>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <_ZN7ADF702018adf7020_InitializeEv+0x4d8>
     59e:	00 00       	nop
     5a0:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     5a2:	21 f7       	brne	.-56     	; 0x56c <_ZN7ADF702018adf7020_InitializeEv+0x4a6>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     5a4:	ab 9a       	sbi	0x15, 3	; 21
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <_ZN7ADF702018adf7020_InitializeEv+0x4e2>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <_ZN7ADF702018adf7020_InitializeEv+0x4e4>
     5aa:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     5ac:	ab 98       	cbi	0x15, 3	; 21
	Set_Register(data_reg);
	//Set_Register(0x101a3b);
	//    Set_Register(0x00102F7B);
	//_delay_ms(1);
	//R9 Setting
	ADF_Regs.R9_AGC.bit1.AGC_LowThreshold =0x1e;
     5ae:	8e e1       	ldi	r24, 0x1E	; 30
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 11 01 	sts	0x0111, r25
     5b6:	80 93 10 01 	sts	0x0110, r24
	ADF_Regs.R9_AGC.bit1.AGC_HighThreshold =0x46;
     5ba:	86 e4       	ldi	r24, 0x46	; 70
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 13 01 	sts	0x0113, r25
     5c2:	80 93 12 01 	sts	0x0112, r24
	ADF_Regs.R9_AGC.bit1.AGC_Search =0;
     5c6:	10 92 15 01 	sts	0x0115, r1
     5ca:	10 92 14 01 	sts	0x0114, r1
	ADF_Regs.R9_AGC.bit1.Gain_Control =0;
     5ce:	10 92 17 01 	sts	0x0117, r1
     5d2:	10 92 16 01 	sts	0x0116, r1
	ADF_Regs.R9_AGC.bit1.LNA_Gain =3;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	90 93 19 01 	sts	0x0119, r25
     5de:	80 93 18 01 	sts	0x0118, r24
	ADF_Regs.R9_AGC.bit1.Filter_Gain =2;
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 1b 01 	sts	0x011B, r25
     5ea:	80 93 1a 01 	sts	0x011A, r24
	ADF_Regs.R9_AGC.bit1.Filter_Current =0;
     5ee:	10 92 1d 01 	sts	0x011D, r1
     5f2:	10 92 1c 01 	sts	0x011C, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     5f6:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     5f8:	a8 98       	cbi	0x15, 0	; 21
     5fa:	30 e2       	ldi	r19, 0x20	; 32
     5fc:	89 ee       	ldi	r24, 0xE9	; 233
     5fe:	91 e3       	ldi	r25, 0x31	; 49
     600:	a2 eb       	ldi	r26, 0xB2	; 178
     602:	b0 e0       	ldi	r27, 0x00	; 0
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     604:	25 b3       	in	r18, 0x15	; 21
     606:	2b 7f       	andi	r18, 0xFB	; 251
     608:	ac 01       	movw	r20, r24
     60a:	bd 01       	movw	r22, r26
     60c:	44 27       	eor	r20, r20
     60e:	77 fd       	sbrc	r23, 7
     610:	43 95       	inc	r20
     612:	55 27       	eor	r21, r21
     614:	66 27       	eor	r22, r22
     616:	77 27       	eor	r23, r23
     618:	44 0f       	add	r20, r20
     61a:	44 0f       	add	r20, r20
     61c:	42 2b       	or	r20, r18
     61e:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     620:	a8 9a       	sbi	0x15, 0	; 21
     622:	00 c0       	rjmp	.+0      	; 0x624 <_ZN7ADF702018adf7020_InitializeEv+0x55e>
     624:	00 c0       	rjmp	.+0      	; 0x626 <_ZN7ADF702018adf7020_InitializeEv+0x560>
     626:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	aa 1f       	adc	r26, r26
     62e:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     630:	a8 98       	cbi	0x15, 0	; 21
     632:	00 c0       	rjmp	.+0      	; 0x634 <_ZN7ADF702018adf7020_InitializeEv+0x56e>
     634:	00 c0       	rjmp	.+0      	; 0x636 <_ZN7ADF702018adf7020_InitializeEv+0x570>
     636:	00 00       	nop
     638:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     63a:	21 f7       	brne	.-56     	; 0x604 <_ZN7ADF702018adf7020_InitializeEv+0x53e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     63c:	ab 9a       	sbi	0x15, 3	; 21
     63e:	00 c0       	rjmp	.+0      	; 0x640 <_ZN7ADF702018adf7020_InitializeEv+0x57a>
     640:	00 c0       	rjmp	.+0      	; 0x642 <_ZN7ADF702018adf7020_InitializeEv+0x57c>
     642:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     644:	ab 98       	cbi	0x15, 3	; 21
     646:	08 95       	ret
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     648:	82 e8       	ldi	r24, 0x82	; 130
     64a:	81 bb       	out	0x11, r24	; 17
		
		PA_ENABLE_WR(0);
     64c:	85 b3       	in	r24, 0x15	; 21
     64e:	8f 77       	andi	r24, 0x7F	; 127
     650:	88 bb       	out	0x18, r24	; 24
     652:	f6 e0       	ldi	r31, 0x06	; 6
     654:	fa 95       	dec	r31
     656:	f1 f7       	brne	.-4      	; 0x654 <_ZN7ADF702018adf7020_InitializeEv+0x58e>
     658:	00 c0       	rjmp	.+0      	; 0x65a <_ZN7ADF702018adf7020_InitializeEv+0x594>
		_delay_us(20);

		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(1);
     65a:	ae 9a       	sbi	0x15, 6	; 21
		TR_SWV2_WR(0);
     65c:	ad 98       	cbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(0);
     65e:	97 98       	cbi	0x12, 7	; 18
	   
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     660:	85 ee       	ldi	r24, 0xE5	; 229
     662:	9d e3       	ldi	r25, 0x3D	; 61
     664:	90 93 69 00 	sts	0x0069, r25
     668:	80 93 68 00 	sts	0x0068, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     66c:	8b e2       	ldi	r24, 0x2B	; 43
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 6b 00 	sts	0x006B, r25
     674:	80 93 6a 00 	sts	0x006A, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 6d 00 	sts	0x006D, r25
     680:	80 93 6c 00 	sts	0x006C, r24
     684:	40 91 6a 00 	lds	r20, 0x006A
     688:	50 91 6b 00 	lds	r21, 0x006B
     68c:	3e cd       	rjmp	.-1412   	; 0x10a <_ZN7ADF702018adf7020_InitializeEv+0x44>

0000068e <_ZN7ADF702011adfReadbackEc>:
		setLED(0);
	//ADF_ReadBack_Format(SILICON_REV);
}
//////////////////////////////////////////////////////////////////////////
unsigned int ADF7020::adfReadback(char readbackMode)
{
     68e:	2f 92       	push	r2
     690:	3f 92       	push	r3
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	60 97       	sbiw	r28, 0x10	; 16
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
	char i;
	uint16_t regData=0;
	
	switch (readbackMode)
     6c2:	63 30       	cpi	r22, 0x03	; 3
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <_ZN7ADF702011adfReadbackEc+0x3a>
     6c6:	e8 c1       	rjmp	.+976    	; 0xa98 <__stack+0x239>
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <_ZN7ADF702011adfReadbackEc+0x3e>
     6ca:	52 c1       	rjmp	.+676    	; 0x970 <__stack+0x111>
     6cc:	65 30       	cpi	r22, 0x05	; 5
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <_ZN7ADF702011adfReadbackEc+0x44>
     6d0:	b3 c1       	rjmp	.+870    	; 0xa38 <__stack+0x1d9>
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <_ZN7ADF702011adfReadbackEc+0x48>
     6d4:	68 c1       	rjmp	.+720    	; 0x9a6 <__stack+0x147>
     6d6:	66 30       	cpi	r22, 0x06	; 6
     6d8:	09 f4       	brne	.+2      	; 0x6dc <_ZN7ADF702011adfReadbackEc+0x4e>
     6da:	95 c1       	rjmp	.+810    	; 0xa06 <__stack+0x1a7>
     6dc:	80 91 fa 00 	lds	r24, 0x00FA
     6e0:	90 91 fb 00 	lds	r25, 0x00FB
     6e4:	60 91 f8 00 	lds	r22, 0x00F8
     6e8:	70 91 f9 00 	lds	r23, 0x00F9
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	99 27       	eor	r25, r25
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	63 70       	andi	r22, 0x03	; 3
     6fa:	77 27       	eor	r23, r23
     6fc:	86 2b       	or	r24, r22
     6fe:	97 2b       	or	r25, r23
     700:	60 91 f6 00 	lds	r22, 0x00F6
     704:	70 91 f7 00 	lds	r23, 0x00F7
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	63 70       	andi	r22, 0x03	; 3
     712:	77 27       	eor	r23, r23
     714:	86 2b       	or	r24, r22
     716:	97 2b       	or	r25, r23
     718:	82 95       	swap	r24
     71a:	92 95       	swap	r25
     71c:	90 7f       	andi	r25, 0xF0	; 240
     71e:	98 27       	eor	r25, r24
     720:	80 7f       	andi	r24, 0xF0	; 240
     722:	98 27       	eor	r25, r24
     724:	07 96       	adiw	r24, 0x07	; 7
     726:	2c 01       	movw	r4, r24
     728:	61 2c       	mov	r6, r1
     72a:	71 2c       	mov	r7, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     72c:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     72e:	a8 98       	cbi	0x15, 0	; 21
     730:	70 e2       	ldi	r23, 0x20	; 32
     732:	f8 8a       	std	Y+16, r15	; 0x10
     734:	ef 86       	std	Y+15, r14	; 0x0f
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     736:	65 b3       	in	r22, 0x15	; 21
     738:	6b 7f       	andi	r22, 0xFB	; 251
     73a:	73 01       	movw	r14, r6
     73c:	62 01       	movw	r12, r4
     73e:	cc 24       	eor	r12, r12
     740:	f7 fc       	sbrc	r15, 7
     742:	c3 94       	inc	r12
     744:	dd 24       	eor	r13, r13
     746:	ee 24       	eor	r14, r14
     748:	ff 24       	eor	r15, r15
     74a:	cc 0c       	add	r12, r12
     74c:	cc 0c       	add	r12, r12
     74e:	c6 2a       	or	r12, r22
     750:	c5 ba       	out	0x15, r12	; 21
		S_clk_WR(1);
     752:	a8 9a       	sbi	0x15, 0	; 21
     754:	00 c0       	rjmp	.+0      	; 0x756 <_ZN7ADF702011adfReadbackEc+0xc8>
     756:	00 c0       	rjmp	.+0      	; 0x758 <_ZN7ADF702011adfReadbackEc+0xca>
     758:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     75a:	44 0c       	add	r4, r4
     75c:	55 1c       	adc	r5, r5
     75e:	66 1c       	adc	r6, r6
     760:	77 1c       	adc	r7, r7
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     762:	a8 98       	cbi	0x15, 0	; 21
     764:	00 c0       	rjmp	.+0      	; 0x766 <_ZN7ADF702011adfReadbackEc+0xd8>
     766:	00 c0       	rjmp	.+0      	; 0x768 <_ZN7ADF702011adfReadbackEc+0xda>
     768:	00 00       	nop
     76a:	71 50       	subi	r23, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     76c:	21 f7       	brne	.-56     	; 0x736 <_ZN7ADF702011adfReadbackEc+0xa8>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     76e:	ab 9a       	sbi	0x15, 3	; 21
     770:	00 c0       	rjmp	.+0      	; 0x772 <_ZN7ADF702011adfReadbackEc+0xe4>
     772:	00 c0       	rjmp	.+0      	; 0x774 <_ZN7ADF702011adfReadbackEc+0xe6>
     774:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     776:	ab 98       	cbi	0x15, 3	; 21
	}
	
	R7_Generate(ADF_Regs.R7_ReadbackSetup.bit1 , regData);
	Set_Register(regData);
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
     778:	ab 9a       	sbi	0x15, 3	; 21
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     77a:	a8 9a       	sbi	0x15, 0	; 21
     77c:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     77e:	63 b3       	in	r22, 0x13	; 19
     780:	61 fb       	bst	r22, 1
     782:	22 27       	eor	r18, r18
     784:	20 f9       	bld	r18, 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	28 0f       	add	r18, r24
     78a:	39 1f       	adc	r19, r25
		regData <<= 1;
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     790:	a8 98       	cbi	0x15, 0	; 21
     792:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     794:	a8 9a       	sbi	0x15, 0	; 21
     796:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     798:	83 b3       	in	r24, 0x13	; 19
     79a:	86 95       	lsr	r24
     79c:	81 70       	andi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	1a 82       	std	Y+2, r1	; 0x02
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	28 0f       	add	r18, r24
     7a8:	39 1f       	adc	r19, r25
		regData <<= 1;
     7aa:	22 0f       	add	r18, r18
     7ac:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7ae:	a8 98       	cbi	0x15, 0	; 21
     7b0:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7b2:	a8 9a       	sbi	0x15, 0	; 21
     7b4:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7b6:	83 b3       	in	r24, 0x13	; 19
     7b8:	86 95       	lsr	r24
     7ba:	81 70       	andi	r24, 0x01	; 1
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	1c 82       	std	Y+4, r1	; 0x04
     7c0:	eb 81       	ldd	r30, Y+3	; 0x03
     7c2:	fc 81       	ldd	r31, Y+4	; 0x04
     7c4:	2e 0f       	add	r18, r30
     7c6:	3f 1f       	adc	r19, r31
		regData <<= 1;
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7cc:	a8 98       	cbi	0x15, 0	; 21
     7ce:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7d0:	a8 9a       	sbi	0x15, 0	; 21
     7d2:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7d4:	83 b3       	in	r24, 0x13	; 19
     7d6:	81 fb       	bst	r24, 1
     7d8:	00 27       	eor	r16, r16
     7da:	00 f9       	bld	r16, 0
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	20 0f       	add	r18, r16
     7e0:	31 1f       	adc	r19, r17
		regData <<= 1;
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     7e6:	a8 98       	cbi	0x15, 0	; 21
     7e8:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     7ea:	a8 9a       	sbi	0x15, 0	; 21
     7ec:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     7ee:	83 b3       	in	r24, 0x13	; 19
     7f0:	81 fb       	bst	r24, 1
     7f2:	ee 24       	eor	r14, r14
     7f4:	e0 f8       	bld	r14, 0
     7f6:	f1 2c       	mov	r15, r1
     7f8:	2e 0d       	add	r18, r14
     7fa:	3f 1d       	adc	r19, r15
		regData <<= 1;
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     800:	a8 98       	cbi	0x15, 0	; 21
     802:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     804:	a8 9a       	sbi	0x15, 0	; 21
     806:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     808:	83 b3       	in	r24, 0x13	; 19
     80a:	81 fb       	bst	r24, 1
     80c:	aa 27       	eor	r26, r26
     80e:	a0 f9       	bld	r26, 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	2a 0f       	add	r18, r26
     814:	3b 1f       	adc	r19, r27
		regData <<= 1;
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     81a:	a8 98       	cbi	0x15, 0	; 21
     81c:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     81e:	a8 9a       	sbi	0x15, 0	; 21
     820:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     822:	83 b3       	in	r24, 0x13	; 19
     824:	81 fb       	bst	r24, 1
     826:	ee 27       	eor	r30, r30
     828:	e0 f9       	bld	r30, 0
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	2e 0f       	add	r18, r30
     82e:	3f 1f       	adc	r19, r31
		regData <<= 1;
     830:	22 0f       	add	r18, r18
     832:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     834:	a8 98       	cbi	0x15, 0	; 21
     836:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     838:	a8 9a       	sbi	0x15, 0	; 21
     83a:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     83c:	83 b3       	in	r24, 0x13	; 19
     83e:	81 fb       	bst	r24, 1
     840:	aa 24       	eor	r10, r10
     842:	a0 f8       	bld	r10, 0
     844:	b1 2c       	mov	r11, r1
     846:	2a 0d       	add	r18, r10
     848:	3b 1d       	adc	r19, r11
		regData <<= 1;
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     84e:	a8 98       	cbi	0x15, 0	; 21
     850:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     852:	a8 9a       	sbi	0x15, 0	; 21
     854:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     856:	83 b3       	in	r24, 0x13	; 19
     858:	81 fb       	bst	r24, 1
     85a:	88 24       	eor	r8, r8
     85c:	80 f8       	bld	r8, 0
     85e:	91 2c       	mov	r9, r1
     860:	28 0d       	add	r18, r8
     862:	39 1d       	adc	r19, r9
		regData <<= 1;
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     868:	a8 98       	cbi	0x15, 0	; 21
     86a:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     86c:	a8 9a       	sbi	0x15, 0	; 21
     86e:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     870:	83 b3       	in	r24, 0x13	; 19
     872:	86 95       	lsr	r24
     874:	81 70       	andi	r24, 0x01	; 1
     876:	8d 83       	std	Y+5, r24	; 0x05
     878:	1e 82       	std	Y+6, r1	; 0x06
     87a:	8d 81       	ldd	r24, Y+5	; 0x05
     87c:	9e 81       	ldd	r25, Y+6	; 0x06
     87e:	28 0f       	add	r18, r24
     880:	39 1f       	adc	r19, r25
		regData <<= 1;
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     886:	a8 98       	cbi	0x15, 0	; 21
     888:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     88a:	a8 9a       	sbi	0x15, 0	; 21
     88c:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     88e:	83 b3       	in	r24, 0x13	; 19
     890:	86 95       	lsr	r24
     892:	81 70       	andi	r24, 0x01	; 1
     894:	8f 83       	std	Y+7, r24	; 0x07
     896:	18 86       	std	Y+8, r1	; 0x08
     898:	ef 81       	ldd	r30, Y+7	; 0x07
     89a:	f8 85       	ldd	r31, Y+8	; 0x08
     89c:	2e 0f       	add	r18, r30
     89e:	3f 1f       	adc	r19, r31
		regData <<= 1;
     8a0:	22 0f       	add	r18, r18
     8a2:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8a4:	a8 98       	cbi	0x15, 0	; 21
     8a6:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8a8:	a8 9a       	sbi	0x15, 0	; 21
     8aa:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8ac:	83 b3       	in	r24, 0x13	; 19
     8ae:	86 95       	lsr	r24
     8b0:	81 70       	andi	r24, 0x01	; 1
     8b2:	89 87       	std	Y+9, r24	; 0x09
     8b4:	1a 86       	std	Y+10, r1	; 0x0a
     8b6:	89 85       	ldd	r24, Y+9	; 0x09
     8b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ba:	28 0f       	add	r18, r24
     8bc:	39 1f       	adc	r19, r25
		regData <<= 1;
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8c2:	a8 98       	cbi	0x15, 0	; 21
     8c4:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8c6:	a8 9a       	sbi	0x15, 0	; 21
     8c8:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8ca:	83 b3       	in	r24, 0x13	; 19
     8cc:	86 95       	lsr	r24
     8ce:	81 70       	andi	r24, 0x01	; 1
     8d0:	8b 87       	std	Y+11, r24	; 0x0b
     8d2:	1c 86       	std	Y+12, r1	; 0x0c
     8d4:	eb 85       	ldd	r30, Y+11	; 0x0b
     8d6:	fc 85       	ldd	r31, Y+12	; 0x0c
     8d8:	2e 0f       	add	r18, r30
     8da:	3f 1f       	adc	r19, r31
		regData <<= 1;
     8dc:	22 0f       	add	r18, r18
     8de:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8e0:	a8 98       	cbi	0x15, 0	; 21
     8e2:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     8e4:	a8 9a       	sbi	0x15, 0	; 21
     8e6:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     8e8:	83 b3       	in	r24, 0x13	; 19
     8ea:	86 95       	lsr	r24
     8ec:	81 70       	andi	r24, 0x01	; 1
     8ee:	8d 87       	std	Y+13, r24	; 0x0d
     8f0:	1e 86       	std	Y+14, r1	; 0x0e
     8f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f6:	28 0f       	add	r18, r24
     8f8:	39 1f       	adc	r19, r25
		regData <<= 1;
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     8fe:	a8 98       	cbi	0x15, 0	; 21
     900:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     902:	a8 9a       	sbi	0x15, 0	; 21
     904:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     906:	83 b3       	in	r24, 0x13	; 19
     908:	81 fb       	bst	r24, 1
     90a:	22 24       	eor	r2, r2
     90c:	20 f8       	bld	r2, 0
     90e:	31 2c       	mov	r3, r1
     910:	22 0d       	add	r18, r2
     912:	33 1d       	adc	r19, r3
		regData <<= 1;
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     918:	a8 98       	cbi	0x15, 0	; 21
     91a:	00 00       	nop
	
	Sl_En_WR(1); //While Sending SData SLE must be 0
	
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
     91c:	a8 9a       	sbi	0x15, 0	; 21
     91e:	00 00       	nop
		_delay_us(1);
		regData += S_Read(); //Read MSB first
     920:	83 b3       	in	r24, 0x13	; 19
     922:	81 fb       	bst	r24, 1
     924:	44 27       	eor	r20, r20
     926:	40 f9       	bld	r20, 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	42 0f       	add	r20, r18
     92c:	53 1f       	adc	r21, r19
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     92e:	a8 98       	cbi	0x15, 0	; 21
     930:	00 00       	nop
		_delay_us(1);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     932:	ab 9a       	sbi	0x15, 3	; 21
     934:	00 00       	nop
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     936:	ab 98       	cbi	0x15, 3	; 21
	for (i = 0 ; i<16 ; i++)
	{
		S_clk_WR(1);
		_delay_us(1);
		regData += S_Read(); //Read MSB first
		regData <<= 1;
     938:	44 0f       	add	r20, r20
     93a:	55 1f       	adc	r21, r21
	Sl_En_WR(1); // After each 32 bits SLE must become 1
	_delay_us(1);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
	
	return regData;
}
     93c:	ca 01       	movw	r24, r20
     93e:	60 96       	adiw	r28, 0x10	; 16
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	3f 90       	pop	r3
     96c:	2f 90       	pop	r2
     96e:	08 95       	ret
unsigned int ADF7020::adfReadback(char readbackMode)
{
	char i;
	uint16_t regData=0;
	
	switch (readbackMode)
     970:	61 30       	cpi	r22, 0x01	; 1
     972:	09 f4       	brne	.+2      	; 0x976 <__stack+0x117>
     974:	7a c0       	rjmp	.+244    	; 0xa6a <__stack+0x20b>
     976:	80 f1       	brcs	.+96     	; 0x9d8 <__stack+0x179>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case BATTERY_VLOTAGE_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	90 93 f9 00 	sts	0x00F9, r25
     980:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
     984:	90 93 f7 00 	sts	0x00F7, r25
     988:	80 93 f6 00 	sts	0x00F6, r24
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     98c:	90 93 fb 00 	sts	0x00FB, r25
     990:	80 93 fa 00 	sts	0x00FA, r24
		break;
     994:	37 e5       	ldi	r19, 0x57	; 87
     996:	43 2e       	mov	r4, r19
     998:	55 24       	eor	r5, r5
     99a:	53 94       	inc	r5
     99c:	61 2c       	mov	r6, r1
     99e:	71 2c       	mov	r7, r1
     9a0:	87 e5       	ldi	r24, 0x57	; 87
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	c3 ce       	rjmp	.-634    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case ADCIN_VOLTAGE_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	90 93 f9 00 	sts	0x00F9, r25
     9ae:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	70 93 f7 00 	sts	0x00F7, r23
     9ba:	60 93 f6 00 	sts	0x00F6, r22
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     9be:	90 93 fb 00 	sts	0x00FB, r25
     9c2:	80 93 fa 00 	sts	0x00FA, r24
		break;
     9c6:	97 e7       	ldi	r25, 0x77	; 119
     9c8:	49 2e       	mov	r4, r25
     9ca:	55 24       	eor	r5, r5
     9cc:	53 94       	inc	r5
     9ce:	61 2c       	mov	r6, r1
     9d0:	71 2c       	mov	r7, r1
     9d2:	87 e7       	ldi	r24, 0x77	; 119
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	aa ce       	rjmp	.-684    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
	uint16_t regData=0;
	
	switch (readbackMode)
	{
		case AFC_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
     9d8:	10 92 f9 00 	sts	0x00F9, r1
     9dc:	10 92 f8 00 	sts	0x00F8, r1
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
     9e0:	10 92 f7 00 	sts	0x00F7, r1
     9e4:	10 92 f6 00 	sts	0x00F6, r1
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 fb 00 	sts	0x00FB, r25
     9f0:	80 93 fa 00 	sts	0x00FA, r24
		break;
     9f4:	57 e0       	ldi	r21, 0x07	; 7
     9f6:	45 2e       	mov	r4, r21
     9f8:	55 24       	eor	r5, r5
     9fa:	53 94       	inc	r5
     9fc:	61 2c       	mov	r6, r1
     9fe:	71 2c       	mov	r7, r1
     a00:	87 e0       	ldi	r24, 0x07	; 7
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	93 ce       	rjmp	.-730    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case FILTER_CALIBRETION_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 2;
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 f9 00 	sts	0x00F9, r25
     a0e:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a12:	10 92 f7 00 	sts	0x00F7, r1
     a16:	10 92 f6 00 	sts	0x00F6, r1
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	90 93 fb 00 	sts	0x00FB, r25
     a22:	80 93 fa 00 	sts	0x00FA, r24
		break;
     a26:	07 e8       	ldi	r16, 0x87	; 135
     a28:	40 2e       	mov	r4, r16
     a2a:	55 24       	eor	r5, r5
     a2c:	53 94       	inc	r5
     a2e:	61 2c       	mov	r6, r1
     a30:	71 2c       	mov	r7, r1
     a32:	87 e8       	ldi	r24, 0x87	; 135
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	7a ce       	rjmp	.-780    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 3;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case SILICON_REVISION_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 3;
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	90 93 f9 00 	sts	0x00F9, r25
     a40:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a44:	10 92 f7 00 	sts	0x00F7, r1
     a48:	10 92 f6 00 	sts	0x00F6, r1
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	90 93 fb 00 	sts	0x00FB, r25
     a54:	80 93 fa 00 	sts	0x00FA, r24
		break;
     a58:	87 ec       	ldi	r24, 0xC7	; 199
     a5a:	48 2e       	mov	r4, r24
     a5c:	55 24       	eor	r5, r5
     a5e:	53 94       	inc	r5
     a60:	61 2c       	mov	r6, r1
     a62:	71 2c       	mov	r7, r1
     a64:	87 ec       	ldi	r24, 0xC7	; 199
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	61 ce       	rjmp	.-830    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode =0;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode =0;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit =1;
		break;
		case RSSI_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 f9 00 	sts	0x00F9, r25
     a72:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 0;
     a76:	10 92 f7 00 	sts	0x00F7, r1
     a7a:	10 92 f6 00 	sts	0x00F6, r1
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     a7e:	90 93 fb 00 	sts	0x00FB, r25
     a82:	80 93 fa 00 	sts	0x00FA, r24
		break;
     a86:	47 e4       	ldi	r20, 0x47	; 71
     a88:	44 2e       	mov	r4, r20
     a8a:	55 24       	eor	r5, r5
     a8c:	53 94       	inc	r5
     a8e:	61 2c       	mov	r6, r1
     a90:	71 2c       	mov	r7, r1
     a92:	87 e4       	ldi	r24, 0x47	; 71
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	4a ce       	rjmp	.-876    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 1;
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
		break;
		case TEMPERATURE_SENSOR_READBACK:
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_Mode = 1;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	90 93 f9 00 	sts	0x00F9, r25
     aa0:	80 93 f8 00 	sts	0x00F8, r24
		ADF_Regs.R7_ReadbackSetup.bit1.ADC_Mode = 2;
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	70 93 f7 00 	sts	0x00F7, r23
     aac:	60 93 f6 00 	sts	0x00F6, r22
		ADF_Regs.R7_ReadbackSetup.bit1.Readback_enablebit = 1;
     ab0:	90 93 fb 00 	sts	0x00FB, r25
     ab4:	80 93 fa 00 	sts	0x00FA, r24
		break;
     ab8:	27 e6       	ldi	r18, 0x67	; 103
     aba:	42 2e       	mov	r4, r18
     abc:	55 24       	eor	r5, r5
     abe:	53 94       	inc	r5
     ac0:	61 2c       	mov	r6, r1
     ac2:	71 2c       	mov	r7, r1
     ac4:	87 e6       	ldi	r24, 0x67	; 103
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	31 ce       	rjmp	.-926    	; 0x72c <_ZN7ADF702011adfReadbackEc+0x9e>

00000aca <_ZN7ADF70207setModeE14TranceiverMode>:
	return regData;
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::setMode(TranceiverMode mode)
{
	this->mode = mode;
     aca:	fc 01       	movw	r30, r24
     acc:	60 83       	st	Z, r22
	return (receiveDataFlag && receivePreambleDetect ) ;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     ace:	61 11       	cpse	r22, r1
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <_ZN7ADF70207setModeE14TranceiverMode+0x22>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     ad2:	2b b7       	in	r18, 0x3b	; 59
     ad4:	20 6a       	ori	r18, 0xA0	; 160
     ad6:	2b bf       	out	0x3b, r18	; 59
		MCUCR=0x0C;
     ad8:	2c e0       	ldi	r18, 0x0C	; 12
     ada:	25 bf       	out	0x35, r18	; 53
		MCUCSR=0x40;
     adc:	20 e4       	ldi	r18, 0x40	; 64
     ade:	24 bf       	out	0x34, r18	; 52
		GIFR=0xA0;
     ae0:	20 ea       	ldi	r18, 0xA0	; 160
     ae2:	2a bf       	out	0x3a, r18	; 58
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     ae4:	20 e1       	ldi	r18, 0x10	; 16
     ae6:	29 bf       	out	0x39, r18	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     ae8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_ZN7ADF702018adf7020_InitializeEv>
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     aec:	2b b7       	in	r18, 0x3b	; 59
     aee:	2f 70       	andi	r18, 0x0F	; 15
     af0:	2b bf       	out	0x3b, r18	; 59
		GIFR=0x00;
     af2:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     af4:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     af6:	14 be       	out	0x34, r1	; 52
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
		//TIMSK=0x00;
	//else
		TIMSK=0x10;
     af8:	20 e1       	ldi	r18, 0x10	; 16
     afa:	29 bf       	out	0x39, r18	; 57
		//ACSR=0x80;
		//SFIOR=0x00;
	//}
	
		
	adf7020_Initialize();
     afc:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_ZN7ADF702018adf7020_InitializeEv>

00000b00 <_ZN7ADF702014receiveInt1ISREv>:
	
}

///////////////////////////////////////////////////
void ADF7020::receiveInt1ISR()
{
     b00:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b02:	80 81       	ld	r24, Z
     b04:	81 11       	cpse	r24, r1
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <_ZN7ADF702014receiveInt1ISREv+0xe>
		{
			if ( receivePreambleDetect )
     b08:	83 85       	ldd	r24, Z+11	; 0x0b
     b0a:	81 11       	cpse	r24, r1
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <_ZN7ADF702014receiveInt1ISREv+0x10>
     b0e:	08 95       	ret
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveBit()
{
	if( receiveBitIndex < 8)
     b10:	87 81       	ldd	r24, Z+7	; 0x07
     b12:	88 30       	cpi	r24, 0x08	; 8
     b14:	38 f4       	brcc	.+14     	; 0xb24 <_ZN7ADF702014receiveInt1ISREv+0x24>
	{
		receivedByteShadow <<= 1;
     b16:	94 81       	ldd	r25, Z+4	; 0x04
     b18:	99 0f       	add	r25, r25
     b1a:	94 83       	std	Z+4, r25	; 0x04
		if (Data_IO_RD())
     b1c:	84 9b       	sbis	0x10, 4	; 16
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <_ZN7ADF702014receiveInt1ISREv+0x24>
			receivedByteShadow |= 1;
     b20:	91 60       	ori	r25, 0x01	; 1
     b22:	94 83       	std	Z+4, r25	; 0x04
	//{
		//setLED(2);
	//}
	
		//receivedByteShadow |= (1 << (7-receiveBitIndex) );
	receiveBitIndex ++;
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	87 83       	std	Z+7, r24	; 0x07
	if (receiveBitIndex == 9)
     b28:	89 30       	cpi	r24, 0x09	; 9
     b2a:	89 f7       	brne	.-30     	; 0xb0e <_ZN7ADF702014receiveInt1ISREv+0xe>
	{
		receiveBitIndex = 0;
     b2c:	17 82       	std	Z+7, r1	; 0x07
		receiveDataFlag = true;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	82 87       	std	Z+10, r24	; 0x0a
		receivedByte = receivedByteShadow;
     b32:	84 81       	ldd	r24, Z+4	; 0x04
     b34:	85 83       	std	Z+5, r24	; 0x05
		receivedByteShadow = 0;
     b36:	14 82       	std	Z+4, r1	; 0x04
     b38:	08 95       	ret

00000b3a <_ZN7ADF702014receiveInt2ISREv>:
	
}
//////////////////////////////////////////////////////////////////////////
void ADF7020::receiveInt2ISR()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 81       	ld	r18, Z
     b3e:	21 11       	cpse	r18, r1
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <_ZN7ADF702014receiveInt2ISREv+0xc>
	{
		receivePreambleDetect = true;
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	23 87       	std	Z+11, r18	; 0x0b
     b46:	08 95       	ret

00000b48 <_ZN7ADF702016transmitTimerISREv>:
		return ;
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::transmitTimerISR()
{
     b48:	fc 01       	movw	r30, r24
		//return ;
	//} 
	//else
	{
		
		Data_IO_WR (oldTransmitBit);
     b4a:	22 b3       	in	r18, 0x12	; 18
     b4c:	80 85       	ldd	r24, Z+8	; 0x08
     b4e:	30 e1       	ldi	r19, 0x10	; 16
     b50:	83 9f       	mul	r24, r19
     b52:	c0 01       	movw	r24, r0
     b54:	11 24       	eor	r1, r1
     b56:	2f 7e       	andi	r18, 0xEF	; 239
     b58:	28 2b       	or	r18, r24
     b5a:	22 bb       	out	0x12, r18	; 18
		//TCNT1L=66;		//for baudrate  9600/7 Kbps
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
     b5c:	46 81       	ldd	r20, Z+6	; 0x06
     b5e:	48 30       	cpi	r20, 0x08	; 8
     b60:	89 f0       	breq	.+34     	; 0xb84 <_ZN7ADF702016transmitTimerISREv+0x3c>
			oldTransmitBit = 1 - oldTransmitBit ;
		else
			oldTransmitBit = ((sendBufferShadow >> (7-sendBitIndex) ) & 1 );
     b62:	83 81       	ldd	r24, Z+3	; 0x03
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	27 e0       	ldi	r18, 0x07	; 7
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	24 1b       	sub	r18, r20
     b6c:	31 09       	sbc	r19, r1
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <_ZN7ADF702016transmitTimerISREv+0x2c>
     b70:	95 95       	asr	r25
     b72:	87 95       	ror	r24
     b74:	2a 95       	dec	r18
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <_ZN7ADF702016transmitTimerISREv+0x28>
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	99 27       	eor	r25, r25
     b7c:	80 87       	std	Z+8, r24	; 0x08
		
		sendBitIndex ++;
     b7e:	4f 5f       	subi	r20, 0xFF	; 255
     b80:	46 83       	std	Z+6, r20	; 0x06
     b82:	08 95       	ret
		//timerCounter ++;		//timerCounter>6
		//if (timerCounter > 6) 
		{
		//	timerCounter =0;
		if ( sendBitIndex == 8 )
			oldTransmitBit = 1 - oldTransmitBit ;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 85       	ldd	r25, Z+8	; 0x08
     b88:	28 2f       	mov	r18, r24
     b8a:	29 1b       	sub	r18, r25
     b8c:	20 87       	std	Z+8, r18	; 0x08
		
		sendBitIndex ++;
		
			if ( sendBitIndex == 9 )
			{
				sendBufferShadow = sendBuffer;
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	93 83       	std	Z+3, r25	; 0x03
				sendBuffer =0 ;
     b92:	12 82       	std	Z+2, r1	; 0x02
				sendBitIndex = 0;
     b94:	16 82       	std	Z+6, r1	; 0x06
				transmitBufferEmpty =true;
     b96:	81 87       	std	Z+9, r24	; 0x09
     b98:	08 95       	ret

00000b9a <_ZN7ADF70208sendByteEc>:
}

//////////////////////////////////////////////////////////////////////////
void ADF7020::sendByte(char data)
{
		sendBuffer = data;
     b9a:	fc 01       	movw	r30, r24
     b9c:	62 83       	std	Z+2, r22	; 0x02
		transmitBufferEmpty= false;
     b9e:	11 86       	std	Z+9, r1	; 0x09
     ba0:	08 95       	ret

00000ba2 <_ZN7ADF702018isTransmitterReadyEv>:
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isTransmitterReady()
{
	return transmitBufferEmpty;
}
     ba2:	fc 01       	movw	r30, r24
     ba4:	81 85       	ldd	r24, Z+9	; 0x09
     ba6:	08 95       	ret

00000ba8 <_ZN7ADF702011receiveByteEv>:
	}
}
//////////////////////////////////////////////////////////////////////////
char ADF7020::receiveByte()
{
	receiveDataFlag = false;
     ba8:	fc 01       	movw	r30, r24
     baa:	12 86       	std	Z+10, r1	; 0x0a
	return receivedByte;
}
     bac:	85 81       	ldd	r24, Z+5	; 0x05
     bae:	08 95       	ret

00000bb0 <_ZN7ADF702018isNewDataAvailableEv>:

//////////////////////////////////////////////////////////////////////////
bool ADF7020::isNewDataAvailable()
{
	//receiveDataFlag=1;
	return (receiveDataFlag && receivePreambleDetect ) ;
     bb0:	fc 01       	movw	r30, r24
     bb2:	22 85       	ldd	r18, Z+10	; 0x0a
     bb4:	22 23       	and	r18, r18
     bb6:	11 f0       	breq	.+4      	; 0xbbc <_ZN7ADF702018isNewDataAvailableEv+0xc>
     bb8:	83 85       	ldd	r24, Z+11	; 0x0b
     bba:	08 95       	ret
     bbc:	80 e0       	ldi	r24, 0x00	; 0
}
     bbe:	08 95       	ret

00000bc0 <_ZN7ADF702010isReceiverEv>:
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
     bc0:	fc 01       	movw	r30, r24
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 81       	ld	r25, Z
     bc6:	91 11       	cpse	r25, r1
     bc8:	80 e0       	ldi	r24, 0x00	; 0
	{
		return true;
	}
	else
		return false;
}
     bca:	08 95       	ret

00000bcc <_ZN7ADF702020clearPreaambleDetectEv>:
//////////////////////////////////////////////////////////////////////////
void ADF7020::clearPreaambleDetect()
{
	char tempInt;
	//tempInt = resetAndStoreIntrruptFlag();
	receivePreambleDetect = false;
     bcc:	fc 01       	movw	r30, r24
     bce:	13 86       	std	Z+11, r1	; 0x0b
     bd0:	08 95       	ret

00000bd2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>:
void ADF7020::adf7020_ChangeMode( TranceiverMode mode )
{
	
	long int data_reg;
	
	this->mode = mode;
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 83       	st	Z, r22
	return (receiveDataFlag && receivePreambleDetect ) ;
}
//////////////////////////////////////////////////////////////////////////
bool ADF7020::isReceiver()
{
	if (mode == TRANSCEIVER_MODE_RECEIVER)
     bd6:	61 11       	cpse	r22, r1
     bd8:	97 c0       	rjmp	.+302    	; 0xd08 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x136>
		// INT0: Off
		// INT1: On
		// INT1 Mode: Rising Edge
		// INT2: On
		// INT2 Mode: Rising Edge
		GICR|=0xA0;
     bda:	8b b7       	in	r24, 0x3b	; 59
     bdc:	80 6a       	ori	r24, 0xA0	; 160
     bde:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x0C;
     be0:	8c e0       	ldi	r24, 0x0C	; 12
     be2:	85 bf       	out	0x35, r24	; 53
		MCUCSR=0x40;
     be4:	80 e4       	ldi	r24, 0x40	; 64
     be6:	84 bf       	out	0x34, r24	; 52
		GIFR=0xA0;
     be8:	80 ea       	ldi	r24, 0xA0	; 160
     bea:	8a bf       	out	0x3a, r24	; 58
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     bec:	80 e1       	ldi	r24, 0x10	; 16
     bee:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     bf0:	ac 98       	cbi	0x15, 4	; 21
     bf2:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     bf4:	ac 9a       	sbi	0x15, 4	; 21
	//delay_ms(100);
	//R0 Setting
	if (mode == TRANSCEIVER_MODE_RECEIVER)
	{
		//set data and clock pins as input.
		DDRD=0x82; //0x3A
     bf6:	82 e8       	ldi	r24, 0x82	; 130
     bf8:	81 bb       	out	0x11, r24	; 17
		PA_ENABLE_WR(0);
     bfa:	85 b3       	in	r24, 0x15	; 21
     bfc:	8f 77       	andi	r24, 0x7F	; 127
     bfe:	88 bb       	out	0x18, r24	; 24
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	fa 95       	dec	r31
     c04:	f1 f7       	brne	.-4      	; 0xc02 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x30>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x36>
		_delay_us(20);
		
		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(1);
     c08:	ae 9a       	sbi	0x15, 6	; 21
		TR_SWV2_WR(0);
     c0a:	ad 98       	cbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(0);
     c0c:	97 98       	cbi	0x12, 7	; 18
		

		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =15845;//31130;//4096;
     c0e:	85 ee       	ldi	r24, 0xE5	; 229
     c10:	9d e3       	ldi	r25, 0x3D	; 61
     c12:	90 93 69 00 	sts	0x0069, r25
     c16:	80 93 68 00 	sts	0x0068, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio = 43;//106;
     c1a:	8b e2       	ldi	r24, 0x2B	; 43
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 6b 00 	sts	0x006B, r25
     c22:	80 93 6a 00 	sts	0x006A, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	90 93 6d 00 	sts	0x006D, r25
     c2e:	80 93 6c 00 	sts	0x006C, r24
     c32:	40 91 6a 00 	lds	r20, 0x006A
     c36:	50 91 6b 00 	lds	r21, 0x006B
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
	}
	ADF_Regs.R0_N.bit1.PLL_enablebit =1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 6f 00 	sts	0x006F, r25
     c42:	80 93 6e 00 	sts	0x006E, r24
	ADF_Regs.R0_N.bit1.MUXOUT =3;
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 71 00 	sts	0x0071, r25
     c4e:	80 93 70 00 	sts	0x0070, r24
	
	R0_Generate(ADF_Regs.R0_N.bit1,data_reg);
     c52:	80 91 6c 00 	lds	r24, 0x006C
     c56:	90 91 6d 00 	lds	r25, 0x006D
     c5a:	81 70       	andi	r24, 0x01	; 1
     c5c:	99 27       	eor	r25, r25
     c5e:	8e 60       	ori	r24, 0x0E	; 14
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ba 2f       	mov	r27, r26
     c66:	a9 2f       	mov	r26, r25
     c68:	98 2f       	mov	r25, r24
     c6a:	88 27       	eor	r24, r24
     c6c:	55 27       	eor	r21, r21
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	84 2b       	or	r24, r20
     c74:	95 2b       	or	r25, r21
     c76:	a6 2b       	or	r26, r22
     c78:	b7 2b       	or	r27, r23
     c7a:	3f e0       	ldi	r19, 0x0F	; 15
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	aa 1f       	adc	r26, r26
     c82:	bb 1f       	adc	r27, r27
     c84:	3a 95       	dec	r19
     c86:	d1 f7       	brne	.-12     	; 0xc7c <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xaa>
     c88:	40 91 68 00 	lds	r20, 0x0068
     c8c:	50 91 69 00 	lds	r21, 0x0069
     c90:	5f 77       	andi	r21, 0x7F	; 127
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	84 2b       	or	r24, r20
     c98:	95 2b       	or	r25, r21
     c9a:	a6 2b       	or	r26, r22
     c9c:	b7 2b       	or	r27, r23
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	aa 1f       	adc	r26, r26
     ca4:	bb 1f       	adc	r27, r27
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	aa 1f       	adc	r26, r26
     cac:	bb 1f       	adc	r27, r27
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	aa 1f       	adc	r26, r26
     cb4:	bb 1f       	adc	r27, r27
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	aa 1f       	adc	r26, r26
     cbc:	bb 1f       	adc	r27, r27
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     cbe:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     cc0:	a8 98       	cbi	0x15, 0	; 21
     cc2:	30 e2       	ldi	r19, 0x20	; 32
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     cc4:	25 b3       	in	r18, 0x15	; 21
     cc6:	2b 7f       	andi	r18, 0xFB	; 251
     cc8:	ac 01       	movw	r20, r24
     cca:	bd 01       	movw	r22, r26
     ccc:	44 27       	eor	r20, r20
     cce:	77 fd       	sbrc	r23, 7
     cd0:	43 95       	inc	r20
     cd2:	55 27       	eor	r21, r21
     cd4:	66 27       	eor	r22, r22
     cd6:	77 27       	eor	r23, r23
     cd8:	44 0f       	add	r20, r20
     cda:	44 0f       	add	r20, r20
     cdc:	42 2b       	or	r20, r18
     cde:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     ce0:	a8 9a       	sbi	0x15, 0	; 21
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x112>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x114>
     ce6:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	aa 1f       	adc	r26, r26
     cee:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     cf0:	a8 98       	cbi	0x15, 0	; 21
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x122>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x124>
     cf6:	00 00       	nop
     cf8:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     cfa:	21 f7       	brne	.-56     	; 0xcc4 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0xf2>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     cfc:	ab 9a       	sbi	0x15, 3	; 21
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x12e>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x130>
     d02:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     d04:	ab 98       	cbi	0x15, 3	; 21
     d06:	08 95       	ret
	{
		// External Interrupt(s) initialization
		// INT0: Off
		// INT1: Off
		// INT2: Off
		GICR &=0x0F;
     d08:	8b b7       	in	r24, 0x3b	; 59
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	8b bf       	out	0x3b, r24	; 59
		GIFR=0x00;
     d0e:	1a be       	out	0x3a, r1	; 58
		MCUCR=0x00;
     d10:	15 be       	out	0x35, r1	; 53
		MCUCSR=0x00;
     d12:	14 be       	out	0x34, r1	; 52
	
	// Timer(s)/Counter(s) Interrupt(s) initialization
	//if (isReceiver())
	//TIMSK=0x00;
	//else
	TIMSK=0x10;
     d14:	80 e1       	ldi	r24, 0x10	; 16
     d16:	89 bf       	out	0x39, r24	; 57

	
	
	
	CE_WR(0);
     d18:	ac 98       	cbi	0x15, 4	; 21
     d1a:	00 00       	nop
	_delay_us(1);
	CE_WR(1);
     d1c:	ac 9a       	sbi	0x15, 4	; 21
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 1;
	}
	else
	{
		//set data and clock port as output.
		DDRD=0xBA;
     d1e:	8a eb       	ldi	r24, 0xBA	; 186
     d20:	81 bb       	out	0x11, r24	; 17
		//RF3023 Setting: RX: V1=1,V2=0 ---- Tx V1=0,V2=1;
		TR_SWV1_WR(0);
     d22:	ae 98       	cbi	0x15, 6	; 21
		TR_SWV2_WR(1);
     d24:	ad 9a       	sbi	0x15, 5	; 21
		
		//HMC646 Setting: 1 = Tx Enable
		TR_SW_WR(1);
     d26:	97 9a       	sbi	0x12, 7	; 18
     d28:	00 00       	nop
		_delay_us(1);
		PA_ENABLE_WR(1);
     d2a:	85 b3       	in	r24, 0x15	; 21
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	88 bb       	out	0x18, r24	; 24
		
		ADF_Regs.R0_N.bit1.Fractional_N_DivideRatio =16500;//16500;//4096;//22938;
     d30:	84 e7       	ldi	r24, 0x74	; 116
     d32:	90 e4       	ldi	r25, 0x40	; 64
     d34:	90 93 69 00 	sts	0x0069, r25
     d38:	80 93 68 00 	sts	0x0068, r24
		ADF_Regs.R0_N.bit1.Integer_N_DivideRatio =43;//107//22 in rx
     d3c:	8b e2       	ldi	r24, 0x2B	; 43
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 6b 00 	sts	0x006B, r25
     d44:	80 93 6a 00 	sts	0x006A, r24
		ADF_Regs.R0_N.bit1.Tx_Rx_bit = 0;
     d48:	10 92 6d 00 	sts	0x006D, r1
     d4c:	10 92 6c 00 	sts	0x006C, r1
     d50:	ac 01       	movw	r20, r24
     d52:	73 cf       	rjmp	.-282    	; 0xc3a <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode+0x68>

00000d54 <_ZN7ADF702018isPreambleDetectedEv>:

//////////////////////////////////////////////////////////////////////////
bool ADF7020::isPreambleDetected()
{
	return receivePreambleDetect;
}
     d54:	fc 01       	movw	r30, r24
     d56:	83 85       	ldd	r24, Z+11	; 0x0b
     d58:	08 95       	ret

00000d5a <_ZN7ADF702013changeRfPowerE12RFPowerState>:

//////////////////////////////////////////////////////////////////////////
void ADF7020::changeRfPower(RFPowerState state)
{
	unsigned long data_reg;
	if (state != rfPowerState)
     d5a:	fc 01       	movw	r30, r24
     d5c:	21 81       	ldd	r18, Z+1	; 0x01
     d5e:	26 17       	cp	r18, r22
     d60:	09 f4       	brne	.+2      	; 0xd64 <_ZN7ADF702013changeRfPowerE12RFPowerState+0xa>
     d62:	ab c0       	rjmp	.+342    	; 0xeba <_ZN7ADF702013changeRfPowerE12RFPowerState+0x160>
	{
		ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_enablebit = 1;
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	30 93 9b 00 	sts	0x009B, r19
     d6c:	20 93 9a 00 	sts	0x009A, r18
		ADF_Regs.R2_TransmitModulation_FSK.bit1.MutePA_until_Lock = 0;
     d70:	10 92 9d 00 	sts	0x009D, r1
     d74:	10 92 9c 00 	sts	0x009C, r1
		ADF_Regs.R2_TransmitModulation_FSK.bit1.Modulation_Scheme = 0;
     d78:	10 92 9f 00 	sts	0x009F, r1
     d7c:	10 92 9e 00 	sts	0x009E, r1
		switch (state)
     d80:	61 30       	cpi	r22, 0x01	; 1
     d82:	09 f4       	brne	.+2      	; 0xd86 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x2c>
     d84:	a4 c0       	rjmp	.+328    	; 0xece <_ZN7ADF702013changeRfPowerE12RFPowerState+0x174>
     d86:	08 f4       	brcc	.+2      	; 0xd8a <_ZN7ADF702013changeRfPowerE12RFPowerState+0x30>
     d88:	99 c0       	rjmp	.+306    	; 0xebc <_ZN7ADF702013changeRfPowerE12RFPowerState+0x162>
     d8a:	62 30       	cpi	r22, 0x02	; 2
     d8c:	41 f4       	brne	.+16     	; 0xd9e <_ZN7ADF702013changeRfPowerE12RFPowerState+0x44>
			case RF_POWER_STATE_HIGH:
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 63;
				rfPowerState = RF_POWER_STATE_HIGH;
			break;
			case RF_POWER_STATE_MEDIUM:
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 14;
     d8e:	2e e0       	ldi	r18, 0x0E	; 14
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	30 93 a1 00 	sts	0x00A1, r19
     d96:	20 93 a0 00 	sts	0x00A0, r18
				rfPowerState = RF_POWER_STATE_MEDIUM;
     d9a:	fc 01       	movw	r30, r24
     d9c:	61 83       	std	Z+1, r22	; 0x01
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 3;
				rfPowerState = RF_POWER_STATE_LOW;
			break;
		}
		
		ADF_Regs.R2_TransmitModulation_FSK.bit1.fDeviation =33; //20 K deviation
     d9e:	81 e2       	ldi	r24, 0x21	; 33
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	90 93 a3 00 	sts	0x00A3, r25
     da6:	80 93 a2 00 	sts	0x00A2, r24
		ADF_Regs.R2_TransmitModulation_FSK.bit1.NotUsed = 0;
     daa:	10 92 a5 00 	sts	0x00A5, r1
     dae:	10 92 a4 00 	sts	0x00A4, r1
		ADF_Regs.R2_TransmitModulation_FSK.bit1.TxDataInvertbit = 0;//0;
     db2:	10 92 a7 00 	sts	0x00A7, r1
     db6:	10 92 a6 00 	sts	0x00A6, r1
		ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_Bias = 2;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	90 93 a9 00 	sts	0x00A9, r25
     dc2:	80 93 a8 00 	sts	0x00A8, r24
		R2_Generate_FSK(ADF_Regs.R2_TransmitModulation_FSK.bit1, data_reg);
     dc6:	80 91 a0 00 	lds	r24, 0x00A0
     dca:	90 91 a1 00 	lds	r25, 0x00A1
     dce:	8f 73       	andi	r24, 0x3F	; 63
     dd0:	99 27       	eor	r25, r25
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	98 60       	ori	r25, 0x08	; 8
     dda:	a0 64       	ori	r26, 0x40	; 64
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	aa 1f       	adc	r26, r26
     de2:	bb 1f       	adc	r27, r27
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	aa 1f       	adc	r26, r26
     dea:	bb 1f       	adc	r27, r27
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	aa 1f       	adc	r26, r26
     df2:	bb 1f       	adc	r27, r27
     df4:	40 91 9e 00 	lds	r20, 0x009E
     df8:	50 91 9f 00 	lds	r21, 0x009F
     dfc:	4f 73       	andi	r20, 0x3F	; 63
     dfe:	55 27       	eor	r21, r21
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	40 91 9c 00 	lds	r20, 0x009C
     e18:	50 91 9d 00 	lds	r21, 0x009D
     e1c:	4f 73       	andi	r20, 0x3F	; 63
     e1e:	55 27       	eor	r21, r21
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	84 2b       	or	r24, r20
     e26:	95 2b       	or	r25, r21
     e28:	a6 2b       	or	r26, r22
     e2a:	b7 2b       	or	r27, r23
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	aa 1f       	adc	r26, r26
     e32:	bb 1f       	adc	r27, r27
     e34:	40 91 9a 00 	lds	r20, 0x009A
     e38:	50 91 9b 00 	lds	r21, 0x009B
     e3c:	4f 73       	andi	r20, 0x3F	; 63
     e3e:	55 27       	eor	r21, r21
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	84 2b       	or	r24, r20
     e46:	95 2b       	or	r25, r21
     e48:	a6 2b       	or	r26, r22
     e4a:	b7 2b       	or	r27, r23
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	aa 1f       	adc	r26, r26
     e52:	bb 1f       	adc	r27, r27
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	aa 1f       	adc	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	aa 1f       	adc	r26, r26
     e62:	bb 1f       	adc	r27, r27
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	aa 1f       	adc	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	02 96       	adiw	r24, 0x02	; 2
     e6e:	a1 1d       	adc	r26, r1
     e70:	b1 1d       	adc	r27, r1
} //~ADF7020

void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
     e72:	ab 98       	cbi	0x15, 3	; 21
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     e74:	a8 98       	cbi	0x15, 0	; 21
     e76:	30 e2       	ldi	r19, 0x20	; 32
	for (ii = 0 ; ii<32 ; ii++)
	{
		S_Data_WR((regData & 0x80000000) == 0x80000000 ); // Must send MSB
     e78:	25 b3       	in	r18, 0x15	; 21
     e7a:	2b 7f       	andi	r18, 0xFB	; 251
     e7c:	ac 01       	movw	r20, r24
     e7e:	bd 01       	movw	r22, r26
     e80:	44 27       	eor	r20, r20
     e82:	77 fd       	sbrc	r23, 7
     e84:	43 95       	inc	r20
     e86:	55 27       	eor	r21, r21
     e88:	66 27       	eor	r22, r22
     e8a:	77 27       	eor	r23, r23
     e8c:	44 0f       	add	r20, r20
     e8e:	44 0f       	add	r20, r20
     e90:	42 2b       	or	r20, r18
     e92:	45 bb       	out	0x15, r20	; 21
		S_clk_WR(1);
     e94:	a8 9a       	sbi	0x15, 0	; 21
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x13e>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <_ZN7ADF702013changeRfPowerE12RFPowerState+0x140>
     e9a:	00 00       	nop
		_delay_us(5);
		regData <<= 1;
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	aa 1f       	adc	r26, r26
     ea2:	bb 1f       	adc	r27, r27
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
     ea4:	a8 98       	cbi	0x15, 0	; 21
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x14e>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <_ZN7ADF702013changeRfPowerE12RFPowerState+0x150>
     eaa:	00 00       	nop
     eac:	31 50       	subi	r19, 0x01	; 1
void ADF7020::Set_Register(unsigned long regData)
{
	char ii;
	Sl_En_WR(0); //While Sending SData SLE must be 0
	S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
	for (ii = 0 ; ii<32 ; ii++)
     eae:	21 f7       	brne	.-56     	; 0xe78 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x11e>
		regData <<= 1;
		S_clk_WR(0); // SData Must be Valid at Clock Rising Edge
		_delay_us(5);
	}
	
	Sl_En_WR(1); // After each 32 bits SLE must become 1
     eb0:	ab 9a       	sbi	0x15, 3	; 21
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x15a>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <_ZN7ADF702013changeRfPowerE12RFPowerState+0x15c>
     eb6:	00 00       	nop
	_delay_us(5);
	Sl_En_WR(0); // For Protecting from Unwanted Data Programming SLE = 0
     eb8:	ab 98       	cbi	0x15, 3	; 21
     eba:	08 95       	ret
		ADF_Regs.R2_TransmitModulation_FSK.bit1.MutePA_until_Lock = 0;
		ADF_Regs.R2_TransmitModulation_FSK.bit1.Modulation_Scheme = 0;
		switch (state)
		{
			case RF_POWER_STATE_HIGH:
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 63;
     ebc:	2f e3       	ldi	r18, 0x3F	; 63
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	30 93 a1 00 	sts	0x00A1, r19
     ec4:	20 93 a0 00 	sts	0x00A0, r18
				rfPowerState = RF_POWER_STATE_HIGH;
     ec8:	fc 01       	movw	r30, r24
     eca:	11 82       	std	Z+1, r1	; 0x01
			break;
     ecc:	68 cf       	rjmp	.-304    	; 0xd9e <_ZN7ADF702013changeRfPowerE12RFPowerState+0x44>
			case RF_POWER_STATE_MEDIUM:
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 14;
				rfPowerState = RF_POWER_STATE_MEDIUM;
			break;
			case RF_POWER_STATE_LOW:
				ADF_Regs.R2_TransmitModulation_FSK.bit1.PA_OutLevel = 3;
     ece:	23 e0       	ldi	r18, 0x03	; 3
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	30 93 a1 00 	sts	0x00A1, r19
     ed6:	20 93 a0 00 	sts	0x00A0, r18
				rfPowerState = RF_POWER_STATE_LOW;
     eda:	fc 01       	movw	r30, r24
     edc:	61 83       	std	Z+1, r22	; 0x01
			break;
     ede:	5f cf       	rjmp	.-322    	; 0xd9e <_ZN7ADF702013changeRfPowerE12RFPowerState+0x44>

00000ee0 <_ZN7ADF702013calculateRSSIEj>:
	
}

void ADF7020::calculateRSSI(uint16_t rssi)
{
	switch (rssi & 0x780)
     ee0:	9b 01       	movw	r18, r22
     ee2:	20 78       	andi	r18, 0x80	; 128
     ee4:	37 70       	andi	r19, 0x07	; 7
     ee6:	21 15       	cp	r18, r1
     ee8:	44 e0       	ldi	r20, 0x04	; 4
     eea:	34 07       	cpc	r19, r20
     eec:	a9 f0       	breq	.+42     	; 0xf18 <_ZN7ADF702013calculateRSSIEj+0x38>
     eee:	70 f0       	brcs	.+28     	; 0xf0c <_ZN7ADF702013calculateRSSIEj+0x2c>
     ef0:	21 15       	cp	r18, r1
     ef2:	45 e0       	ldi	r20, 0x05	; 5
     ef4:	34 07       	cpc	r19, r20
     ef6:	49 f1       	breq	.+82     	; 0xf4a <_ZN7ADF702013calculateRSSIEj+0x6a>
     ef8:	21 15       	cp	r18, r1
     efa:	47 e0       	ldi	r20, 0x07	; 7
     efc:	34 07       	cpc	r19, r20
     efe:	d1 f0       	breq	.+52     	; 0xf34 <_ZN7ADF702013calculateRSSIEj+0x54>
     f00:	20 38       	cpi	r18, 0x80	; 128
     f02:	34 40       	sbci	r19, 0x04	; 4
     f04:	49 f0       	breq	.+18     	; 0xf18 <_ZN7ADF702013calculateRSSIEj+0x38>
		break;
		case 0:														
			changeRfPower(RF_POWER_STATE_LOW);					   //  -70 dbm  < power
		break;
		default:
			changeRfPower(RF_POWER_STATE_HIGH);
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_ZN7ADF702013changeRfPowerE12RFPowerState>
	
}

void ADF7020::calculateRSSI(uint16_t rssi)
{
	switch (rssi & 0x780)
     f0c:	21 15       	cp	r18, r1
     f0e:	31 05       	cpc	r19, r1
     f10:	59 f4       	brne	.+22     	; 0xf28 <_ZN7ADF702013calculateRSSIEj+0x48>
		break;
		case 0x200:
			changeRfPower(RF_POWER_STATE_LOW);						// -75 <power
		break;
		case 0:														
			changeRfPower(RF_POWER_STATE_LOW);					   //  -70 dbm  < power
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_ZN7ADF702013changeRfPowerE12RFPowerState>
				changeRfPower(RF_POWER_STATE_MEDIUM);
			else 		 //	RFpower >-88
				changeRfPower(RF_POWER_STATE_LOW);
		break;
		case 0x400:
			if ((rssi & 0x7F) < 20 )								// -90 <power <-80 dbm
     f18:	6f 77       	andi	r22, 0x7F	; 127
     f1a:	77 27       	eor	r23, r23
     f1c:	64 31       	cpi	r22, 0x14	; 20
     f1e:	71 05       	cpc	r23, r1
     f20:	c0 f7       	brcc	.-16     	; 0xf12 <_ZN7ADF702013calculateRSSIEj+0x32>
	{
		case 0x700:
			if ((rssi & 0x7F) < 20 )								//power <-110 dbm
				changeRfPower(RF_POWER_STATE_HIGH); 
			else if ((rssi & 0x7F) > 20  && (rssi & 0x7F) < 60)		 // -110 <RFpower < -90
				changeRfPower(RF_POWER_STATE_MEDIUM);
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_ZN7ADF702013changeRfPowerE12RFPowerState>
	
}

void ADF7020::calculateRSSI(uint16_t rssi)
{
	switch (rssi & 0x780)
     f28:	21 15       	cp	r18, r1
     f2a:	32 40       	sbci	r19, 0x02	; 2
     f2c:	91 f3       	breq	.-28     	; 0xf12 <_ZN7ADF702013calculateRSSIEj+0x32>
		break;
		case 0:														
			changeRfPower(RF_POWER_STATE_LOW);					   //  -70 dbm  < power
		break;
		default:
			changeRfPower(RF_POWER_STATE_HIGH);
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_ZN7ADF702013changeRfPowerE12RFPowerState>
void ADF7020::calculateRSSI(uint16_t rssi)
{
	switch (rssi & 0x780)
	{
		case 0x700:
			if ((rssi & 0x7F) < 20 )								//power <-110 dbm
     f34:	6f 77       	andi	r22, 0x7F	; 127
     f36:	77 27       	eor	r23, r23
     f38:	64 31       	cpi	r22, 0x14	; 20
     f3a:	71 05       	cpc	r23, r1
     f3c:	20 f3       	brcs	.-56     	; 0xf06 <_ZN7ADF702013calculateRSSIEj+0x26>
				changeRfPower(RF_POWER_STATE_HIGH); 
			else if ((rssi & 0x7F) > 20  && (rssi & 0x7F) < 60)		 // -110 <RFpower < -90
     f3e:	65 51       	subi	r22, 0x15	; 21
     f40:	71 09       	sbc	r23, r1
     f42:	67 32       	cpi	r22, 0x27	; 39
     f44:	71 05       	cpc	r23, r1
     f46:	28 f7       	brcc	.-54     	; 0xf12 <_ZN7ADF702013calculateRSSIEj+0x32>
     f48:	ec cf       	rjmp	.-40     	; 0xf22 <_ZN7ADF702013calculateRSSIEj+0x42>
				changeRfPower(RF_POWER_STATE_MEDIUM);
			else
				changeRfPower(RF_POWER_STATE_LOW);
		break;
		case 0x500:
			if ((rssi & 0x7F) < 5 )								//power <-110 dbm
     f4a:	6f 77       	andi	r22, 0x7F	; 127
     f4c:	77 27       	eor	r23, r23
     f4e:	65 30       	cpi	r22, 0x05	; 5
     f50:	71 05       	cpc	r23, r1
     f52:	c8 f2       	brcs	.-78     	; 0xf06 <_ZN7ADF702013calculateRSSIEj+0x26>
				changeRfPower(RF_POWER_STATE_HIGH);
			else if ((rssi & 0x7F) > 5  && (rssi & 0x7F) < 20 )		 // -110 <RFpower < -90
     f54:	66 50       	subi	r22, 0x06	; 6
     f56:	71 09       	sbc	r23, r1
     f58:	6e 30       	cpi	r22, 0x0E	; 14
     f5a:	71 05       	cpc	r23, r1
     f5c:	10 f3       	brcs	.-60     	; 0xf22 <_ZN7ADF702013calculateRSSIEj+0x42>
     f5e:	d9 cf       	rjmp	.-78     	; 0xf12 <_ZN7ADF702013calculateRSSIEj+0x32>

00000f60 <_ZN4FIFOC1Ev>:
#include "functions.h"
#include <avr/interrupt.h>
// default constructor
FIFO::FIFO()
{
	readIndex = 0;
     f60:	fc 01       	movw	r30, r24
     f62:	ef 58       	subi	r30, 0x8F	; 143
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	11 82       	std	Z+1, r1	; 0x01
     f68:	10 82       	st	Z, r1
	writeIndex = 0;
     f6a:	fc 01       	movw	r30, r24
     f6c:	ed 58       	subi	r30, 0x8D	; 141
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	11 82       	std	Z+1, r1	; 0x01
     f72:	10 82       	st	Z, r1
     f74:	08 95       	ret

00000f76 <_ZN4FIFOD1Ev>:
} //FIFO

// default destructor
FIFO::~FIFO()
     f76:	08 95       	ret

00000f78 <_ZN4FIFO8readByteERc>:
{
} //~FIFO

bool FIFO::readByte(char &data)
{
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	8c 01       	movw	r16, r24
     f8a:	7b 01       	movw	r14, r22
{
	
	int length=0;
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
     f8c:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
     f90:	f8 01       	movw	r30, r16
     f92:	ed 58       	subi	r30, 0x8D	; 141
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	40 81       	ld	r20, Z
     f98:	51 81       	ldd	r21, Z+1	; 0x01
     f9a:	e8 01       	movw	r28, r16
     f9c:	cf 58       	subi	r28, 0x8F	; 143
     f9e:	df 4f       	sbci	r29, 0xFF	; 255
     fa0:	28 81       	ld	r18, Y
     fa2:	39 81       	ldd	r19, Y+1	; 0x01
     fa4:	42 17       	cp	r20, r18
     fa6:	53 07       	cpc	r21, r19
     fa8:	44 f5       	brge	.+80     	; 0xffa <_ZN4FIFO8readByteERc+0x82>
		length =	writeIndex - readIndex;
	else
		length = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
     faa:	42 1b       	sub	r20, r18
     fac:	53 0b       	sbc	r21, r19
     fae:	6a 01       	movw	r12, r20
     fb0:	91 e7       	ldi	r25, 0x71	; 113
     fb2:	c9 0e       	add	r12, r25
     fb4:	d1 1c       	adc	r13, r1
	
	restoreIntrrupt(interruptFlag);
     fb6:	0e 94 08 0a 	call	0x1410	; 0x1410 <_Z15restoreIntrruptc>
} //~FIFO

bool FIFO::readByte(char &data)
{
	//char temp = 0;
	if(getFifoFullLength() > 0 )
     fba:	1c 14       	cp	r1, r12
     fbc:	1d 04       	cpc	r1, r13
     fbe:	2c f5       	brge	.+74     	; 0x100a <_ZN4FIFO8readByteERc+0x92>
	{
		data = fifoBuffer[readIndex];
     fc0:	e8 81       	ld	r30, Y
     fc2:	f9 81       	ldd	r31, Y+1	; 0x01
     fc4:	e0 0f       	add	r30, r16
     fc6:	f1 1f       	adc	r31, r17
     fc8:	80 81       	ld	r24, Z
     fca:	f7 01       	movw	r30, r14
     fcc:	80 83       	st	Z, r24
		readIndex ++ ;
     fce:	88 81       	ld	r24, Y
     fd0:	99 81       	ldd	r25, Y+1	; 0x01
     fd2:	01 96       	adiw	r24, 0x01	; 1
		if ( readIndex > MAX_FIFO_LENGTH )
     fd4:	81 37       	cpi	r24, 0x71	; 113
     fd6:	91 05       	cpc	r25, r1
     fd8:	64 f0       	brlt	.+24     	; 0xff2 <_ZN4FIFO8readByteERc+0x7a>
			readIndex =0;
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	18 82       	st	Y, r1
		return true;
     fde:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	08 95       	ret
{
	//char temp = 0;
	if(getFifoFullLength() > 0 )
	{
		data = fifoBuffer[readIndex];
		readIndex ++ ;
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	88 83       	st	Y, r24
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
		return true;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	f3 cf       	rjmp	.-26     	; 0xfe0 <_ZN4FIFO8readByteERc+0x68>
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		length =	writeIndex - readIndex;
     ffa:	6a 01       	movw	r12, r20
     ffc:	c2 1a       	sub	r12, r18
     ffe:	d3 0a       	sbc	r13, r19
	else
		length = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
	
	restoreIntrrupt(interruptFlag);
    1000:	0e 94 08 0a 	call	0x1410	; 0x1410 <_Z15restoreIntrruptc>
} //~FIFO

bool FIFO::readByte(char &data)
{
	//char temp = 0;
	if(getFifoFullLength() > 0 )
    1004:	1c 14       	cp	r1, r12
    1006:	1d 04       	cpc	r1, r13
    1008:	dc f2       	brlt	.-74     	; 0xfc0 <_ZN4FIFO8readByteERc+0x48>
		readIndex ++ ;
		if ( readIndex > MAX_FIFO_LENGTH )
			readIndex =0;
		return true;
	}
	return false;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	e9 cf       	rjmp	.-46     	; 0xfe0 <_ZN4FIFO8readByteERc+0x68>

0000100e <_ZN4FIFO9writeByteEc>:

void FIFO::writeByte( char data )
{
	//if (getFifoFullLength() < MAX_FIFO_LENGTH )
	{
		fifoBuffer [writeIndex] = data;
    100e:	fc 01       	movw	r30, r24
    1010:	ed 58       	subi	r30, 0x8D	; 141
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	20 81       	ld	r18, Z
    1016:	31 81       	ldd	r19, Z+1	; 0x01
    1018:	dc 01       	movw	r26, r24
    101a:	a2 0f       	add	r26, r18
    101c:	b3 1f       	adc	r27, r19
    101e:	6c 93       	st	X, r22
		writeIndex ++ ;
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
		if ( writeIndex > MAX_FIFO_LENGTH )
    1024:	21 37       	cpi	r18, 0x71	; 113
    1026:	31 05       	cpc	r19, r1
    1028:	1c f0       	brlt	.+6      	; 0x1030 <_ZN4FIFO9writeByteEc+0x22>
			writeIndex =0;
    102a:	11 82       	std	Z+1, r1	; 0x01
    102c:	10 82       	st	Z, r1
    102e:	08 95       	ret
void FIFO::writeByte( char data )
{
	//if (getFifoFullLength() < MAX_FIFO_LENGTH )
	{
		fifoBuffer [writeIndex] = data;
		writeIndex ++ ;
    1030:	31 83       	std	Z+1, r19	; 0x01
    1032:	20 83       	st	Z, r18
    1034:	08 95       	ret

00001036 <_ZN4FIFO10readStringEPci>:
	}
	
}

int FIFO::readString( char *str,int strSize )
{
    1036:	6f 92       	push	r6
    1038:	7f 92       	push	r7
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	5c 01       	movw	r10, r24
    1054:	6b 01       	movw	r12, r22
    1056:	3a 01       	movw	r6, r20
	char temp;
	int length = 0;
	
	if ( strSize > MAX_FIFO_LENGTH )
    1058:	41 37       	cpi	r20, 0x71	; 113
    105a:	51 05       	cpc	r21, r1
    105c:	0c f4       	brge	.+2      	; 0x1060 <_ZN4FIFO10readStringEPci+0x2a>
    105e:	4a c0       	rjmp	.+148    	; 0x10f4 <_ZN4FIFO10readStringEPci+0xbe>
	{
		strSize = MAX_FIFO_LENGTH ;
    1060:	90 e7       	ldi	r25, 0x70	; 112
    1062:	69 2e       	mov	r6, r25
    1064:	71 2c       	mov	r7, r1
    1066:	00 e0       	ldi	r16, 0x00	; 0
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	83 e7       	ldi	r24, 0x73	; 115
    106c:	88 2e       	mov	r8, r24
    106e:	91 2c       	mov	r9, r1
    1070:	8a 0c       	add	r8, r10
    1072:	9b 1c       	adc	r9, r11
    1074:	e5 01       	movw	r28, r10
    1076:	cf 58       	subi	r28, 0x8F	; 143
    1078:	df 4f       	sbci	r29, 0xFF	; 255
{
	
	int length=0;
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
    107a:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    107e:	f4 01       	movw	r30, r8
    1080:	e0 80       	ld	r14, Z
    1082:	f1 80       	ldd	r15, Z+1	; 0x01
    1084:	28 81       	ld	r18, Y
    1086:	39 81       	ldd	r19, Y+1	; 0x01
    1088:	e2 16       	cp	r14, r18
    108a:	f3 06       	cpc	r15, r19
    108c:	84 f5       	brge	.+96     	; 0x10ee <_ZN4FIFO10readStringEPci+0xb8>
		length =	writeIndex - readIndex;
	else
		length = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
    108e:	e2 1a       	sub	r14, r18
    1090:	f3 0a       	sbc	r15, r19
    1092:	f1 e7       	ldi	r31, 0x71	; 113
    1094:	ef 0e       	add	r14, r31
    1096:	f1 1c       	adc	r15, r1
	
	restoreIntrrupt(interruptFlag);
    1098:	0e 94 08 0a 	call	0x1410	; 0x1410 <_Z15restoreIntrruptc>
} //~FIFO

bool FIFO::readByte(char &data)
{
	//char temp = 0;
	if(getFifoFullLength() > 0 )
    109c:	1e 14       	cp	r1, r14
    109e:	1f 04       	cpc	r1, r15
    10a0:	b4 f4       	brge	.+44     	; 0x10ce <_ZN4FIFO10readStringEPci+0x98>
	{
		data = fifoBuffer[readIndex];
    10a2:	88 81       	ld	r24, Y
    10a4:	99 81       	ldd	r25, Y+1	; 0x01
    10a6:	f5 01       	movw	r30, r10
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	20 81       	ld	r18, Z
		readIndex ++ ;
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	99 83       	std	Y+1, r25	; 0x01
    10b2:	88 83       	st	Y, r24
		if ( readIndex > MAX_FIFO_LENGTH )
    10b4:	81 37       	cpi	r24, 0x71	; 113
    10b6:	91 05       	cpc	r25, r1
    10b8:	14 f0       	brlt	.+4      	; 0x10be <_ZN4FIFO10readStringEPci+0x88>
			readIndex =0;
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	18 82       	st	Y, r1
	
	while (strSize)
	{
		if(!readByte(temp))
			return length;
		length ++ ;
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
		*str = temp;
    10c2:	f6 01       	movw	r30, r12
    10c4:	21 93       	st	Z+, r18
    10c6:	6f 01       	movw	r12, r30
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    10c8:	60 16       	cp	r6, r16
    10ca:	71 06       	cpc	r7, r17
    10cc:	b1 f6       	brne	.-84     	; 0x107a <_ZN4FIFO10readStringEPci+0x44>
		*str = temp;
		str++;
		strSize --;
	};
	return length;
}
    10ce:	c8 01       	movw	r24, r16
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	08 95       	ret
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		length =	writeIndex - readIndex;
    10ee:	e2 1a       	sub	r14, r18
    10f0:	f3 0a       	sbc	r15, r19
    10f2:	d2 cf       	rjmp	.-92     	; 0x1098 <_ZN4FIFO10readStringEPci+0x62>
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    10f4:	41 15       	cp	r20, r1
    10f6:	51 05       	cpc	r21, r1
    10f8:	09 f0       	breq	.+2      	; 0x10fc <_ZN4FIFO10readStringEPci+0xc6>
    10fa:	b5 cf       	rjmp	.-150    	; 0x1066 <_ZN4FIFO10readStringEPci+0x30>
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	10 e0       	ldi	r17, 0x00	; 0
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <_ZN4FIFO10readStringEPci+0x98>

00001102 <_ZN4FIFO11writeStringEPci>:
	};
	return length;
}

void FIFO::writeString( char *str,int strSize )
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
	if ( strSize > MAX_FIFO_LENGTH )
    1106:	41 37       	cpi	r20, 0x71	; 113
    1108:	51 05       	cpc	r21, r1
    110a:	04 f1       	brlt	.+64     	; 0x114c <_ZN4FIFO11writeStringEPci+0x4a>
	{
		strSize = MAX_FIFO_LENGTH ;
    110c:	40 e7       	ldi	r20, 0x70	; 112
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	ec 01       	movw	r28, r24
    1112:	cd 58       	subi	r28, 0x8D	; 141
    1114:	df 4f       	sbci	r29, 0xFF	; 255
    1116:	28 81       	ld	r18, Y
    1118:	39 81       	ldd	r19, Y+1	; 0x01
    111a:	fb 01       	movw	r30, r22
		strSize --;
	};
	return length;
}

void FIFO::writeString( char *str,int strSize )
    111c:	46 0f       	add	r20, r22
    111e:	57 1f       	adc	r21, r23
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
	{
		writeByte(*str);
    1120:	61 91       	ld	r22, Z+

void FIFO::writeByte( char data )
{
	//if (getFifoFullLength() < MAX_FIFO_LENGTH )
	{
		fifoBuffer [writeIndex] = data;
    1122:	dc 01       	movw	r26, r24
    1124:	a2 0f       	add	r26, r18
    1126:	b3 1f       	adc	r27, r19
    1128:	6c 93       	st	X, r22
		writeIndex ++ ;
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	39 83       	std	Y+1, r19	; 0x01
    1130:	28 83       	st	Y, r18
		if ( writeIndex > MAX_FIFO_LENGTH )
    1132:	21 37       	cpi	r18, 0x71	; 113
    1134:	31 05       	cpc	r19, r1
    1136:	24 f0       	brlt	.+8      	; 0x1140 <_ZN4FIFO11writeStringEPci+0x3e>
			writeIndex =0;
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	18 82       	st	Y, r1
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    1140:	e4 17       	cp	r30, r20
    1142:	f5 07       	cpc	r31, r21
    1144:	69 f7       	brne	.-38     	; 0x1120 <_ZN4FIFO11writeStringEPci+0x1e>
	{
		writeByte(*str);
		str++;
		strSize --;
	};
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret
	if ( strSize > MAX_FIFO_LENGTH )
	{
		strSize = MAX_FIFO_LENGTH ;
	}
	
	while (strSize)
    114c:	41 15       	cp	r20, r1
    114e:	51 05       	cpc	r21, r1
    1150:	f9 f6       	brne	.-66     	; 0x1110 <_ZN4FIFO11writeStringEPci+0xe>
    1152:	f9 cf       	rjmp	.-14     	; 0x1146 <_ZN4FIFO11writeStringEPci+0x44>

00001154 <_ZN4FIFO17getFifoFullLengthEv>:
}



int FIFO::getFifoFullLength()
{
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8c 01       	movw	r16, r24
	
	int length=0;
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
    115e:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z25resetAndStoreIntrruptFlagv>
	
	if (writeIndex >= readIndex)
    1162:	f8 01       	movw	r30, r16
    1164:	ed 58       	subi	r30, 0x8D	; 141
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	c0 81       	ld	r28, Z
    116a:	d1 81       	ldd	r29, Z+1	; 0x01
    116c:	f8 01       	movw	r30, r16
    116e:	ef 58       	subi	r30, 0x8F	; 143
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	20 81       	ld	r18, Z
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	c2 17       	cp	r28, r18
    1178:	d3 07       	cpc	r29, r19
    117a:	64 f4       	brge	.+24     	; 0x1194 <_ZN4FIFO17getFifoFullLengthEv+0x40>
		length =	writeIndex - readIndex;
	else
		length = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
    117c:	c2 1b       	sub	r28, r18
    117e:	d3 0b       	sbc	r29, r19
    1180:	cf 58       	subi	r28, 0x8F	; 143
    1182:	df 4f       	sbci	r29, 0xFF	; 255
	
	restoreIntrrupt(interruptFlag);
    1184:	0e 94 08 0a 	call	0x1410	; 0x1410 <_Z15restoreIntrruptc>
	
	return length;
}
    1188:	ce 01       	movw	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret
	char interruptFlag ;
	
	interruptFlag = resetAndStoreIntrruptFlag();
	
	if (writeIndex >= readIndex)
		length =	writeIndex - readIndex;
    1194:	c2 1b       	sub	r28, r18
    1196:	d3 0b       	sbc	r29, r19
	else
		length = MAX_FIFO_LENGTH + 1 - (readIndex - writeIndex);
	
	restoreIntrrupt(interruptFlag);
    1198:	0e 94 08 0a 	call	0x1410	; 0x1410 <_Z15restoreIntrruptc>
	
	return length;
}
    119c:	ce 01       	movw	r24, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <_ZN4FIFO9clearFifoEv>:
	return length;
}

void FIFO::clearFifo()
{
	writeIndex=readIndex=0;
    11a8:	fc 01       	movw	r30, r24
    11aa:	ef 58       	subi	r30, 0x8F	; 143
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	11 82       	std	Z+1, r1	; 0x01
    11b0:	10 82       	st	Z, r1
    11b2:	fc 01       	movw	r30, r24
    11b4:	ed 58       	subi	r30, 0x8D	; 141
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	11 82       	std	Z+1, r1	; 0x01
    11ba:	10 82       	st	Z, r1
    11bc:	08 95       	ret

000011be <_Z16micro_Initializev>:
uint8_t baseStationMACAddress EEMEM;


void micro_Initialize()
{
	PORTA=0x00;
    11be:	1b ba       	out	0x1b, r1	; 27
	DDRA=0x0F;
    11c0:	8f e0       	ldi	r24, 0x0F	; 15
    11c2:	8a bb       	out	0x1a, r24	; 26

	PORTB=0x10;
    11c4:	80 e1       	ldi	r24, 0x10	; 16
    11c6:	88 bb       	out	0x18, r24	; 24
	DDRB=0x18;
    11c8:	88 e1       	ldi	r24, 0x18	; 24
    11ca:	87 bb       	out	0x17, r24	; 23

	PORTC=0x00;
    11cc:	15 ba       	out	0x15, r1	; 21
	DDRC=0x1D;
    11ce:	8d e1       	ldi	r24, 0x1D	; 29
    11d0:	84 bb       	out	0x14, r24	; 20

	PORTD=0x00;
    11d2:	12 ba       	out	0x12, r1	; 18
	DDRD=0x82;
    11d4:	82 e8       	ldi	r24, 0x82	; 130
    11d6:	81 bb       	out	0x11, r24	; 17
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x00;
    11d8:	13 be       	out	0x33, r1	; 51
TCNT0=0x00;
    11da:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
    11dc:	1c be       	out	0x3c, r1	; 60
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
    11de:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x01;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
    11e4:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
    11e6:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
    11e8:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
    11ea:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x03;
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x41;
    11f0:	81 e4       	ldi	r24, 0x41	; 65
    11f2:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
    11f4:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
    11f6:	18 bc       	out	0x28, r1	; 40
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR=0x00;
    11f8:	12 bc       	out	0x22, r1	; 34
	TCCR2=0x00;
    11fa:	15 bc       	out	0x25, r1	; 37
	TCNT2=0x00;
    11fc:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
    11fe:	13 bc       	out	0x23, r1	; 35
	//ACSR=0x00;
	//SFIOR=0x00;
	//}
	//else
	//{
	ACSR=0x80;
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00;
    1204:	10 be       	out	0x30, r1	; 48
    1206:	08 95       	ret

00001208 <_Z9ToggleLEDc>:
}

//////////////////////////////////////////////////////////////////////////
void ToggleLED(char led_num)
{
	switch(led_num)
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	01 f1       	breq	.+64     	; 0x124c <_Z9ToggleLEDc+0x44>
    120c:	28 f0       	brcs	.+10     	; 0x1218 <_Z9ToggleLEDc+0x10>
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	19 f1       	breq	.+70     	; 0x1258 <_Z9ToggleLEDc+0x50>
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	99 f0       	breq	.+38     	; 0x123c <_Z9ToggleLEDc+0x34>
    1216:	08 95       	ret
    1218:	88 23       	and	r24, r24
    121a:	51 f0       	breq	.+20     	; 0x1230 <_Z9ToggleLEDc+0x28>
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	d9 f7       	brne	.-10     	; 0x1216 <_Z9ToggleLEDc+0xe>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    1220:	8b b3       	in	r24, 0x1b	; 27
    1222:	8b 7f       	andi	r24, 0xFB	; 251
    1224:	ca 9b       	sbis	0x19, 2	; 25
    1226:	10 c0       	rjmp	.+32     	; 0x1248 <_Z9ToggleLEDc+0x40>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	89 2b       	or	r24, r25
    122c:	8b bb       	out	0x1b, r24	; 27
    122e:	08 95       	ret
void ToggleLED(char led_num)
{
	switch(led_num)
	{
		case 0:
		Led0_WR(!Led0_RD());
    1230:	8b b3       	in	r24, 0x1b	; 27
    1232:	8d 7f       	andi	r24, 0xFD	; 253
    1234:	c9 99       	sbic	0x19, 1	; 25
    1236:	f8 cf       	rjmp	.-16     	; 0x1228 <_Z9ToggleLEDc+0x20>
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	f7 cf       	rjmp	.-18     	; 0x122a <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
		break;
		case 4:
		Led4_WR(!Led4_RD());
    123c:	8b b3       	in	r24, 0x1b	; 27
    123e:	8f 77       	andi	r24, 0x7F	; 127
    1240:	cf 99       	sbic	0x19, 7	; 25
    1242:	f2 cf       	rjmp	.-28     	; 0x1228 <_Z9ToggleLEDc+0x20>
    1244:	90 e8       	ldi	r25, 0x80	; 128
    1246:	f1 cf       	rjmp	.-30     	; 0x122a <_Z9ToggleLEDc+0x22>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	ef cf       	rjmp	.-34     	; 0x122a <_Z9ToggleLEDc+0x22>
		break;
		case 2:
		Led2_WR(!Led2_RD());
    124c:	8b b3       	in	r24, 0x1b	; 27
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	cb 99       	sbic	0x19, 3	; 25
    1252:	ea cf       	rjmp	.-44     	; 0x1228 <_Z9ToggleLEDc+0x20>
    1254:	98 e0       	ldi	r25, 0x08	; 8
    1256:	e9 cf       	rjmp	.-46     	; 0x122a <_Z9ToggleLEDc+0x22>
		break;
		case 3:
		Led3_WR(!Led3_RD());
    1258:	8b b3       	in	r24, 0x1b	; 27
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	cc 99       	sbic	0x19, 4	; 25
    125e:	e4 cf       	rjmp	.-56     	; 0x1228 <_Z9ToggleLEDc+0x20>
    1260:	90 e1       	ldi	r25, 0x10	; 16
    1262:	e3 cf       	rjmp	.-58     	; 0x122a <_Z9ToggleLEDc+0x22>

00001264 <_Z6setLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	79 f0       	breq	.+30     	; 0x1286 <_Z6setLEDc+0x22>
    1268:	30 f0       	brcs	.+12     	; 0x1276 <_Z6setLEDc+0x12>
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	71 f0       	breq	.+28     	; 0x128a <_Z6setLEDc+0x26>
    126e:	84 30       	cpi	r24, 0x04	; 4
    1270:	41 f0       	breq	.+16     	; 0x1282 <_Z6setLEDc+0x1e>
		break;
		case 4:
		Led4_WR(1);
		break;
		default :
		Led0_WR(1);
    1272:	d9 9a       	sbi	0x1b, 1	; 27
    1274:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void setLED(char led_num)
{
	switch(led_num)
    1276:	88 23       	and	r24, r24
    1278:	e1 f3       	breq	.-8      	; 0x1272 <_Z6setLEDc+0xe>
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	d1 f7       	brne	.-12     	; 0x1272 <_Z6setLEDc+0xe>
	{
		case 0:
		Led0_WR(1);
		break;
		case 1:
		Led1_WR(1);
    127e:	da 9a       	sbi	0x1b, 2	; 27
		break;
    1280:	08 95       	ret
		break;
		case 3:
		Led3_WR(1);
		break;
		case 4:
		Led4_WR(1);
    1282:	df 9a       	sbi	0x1b, 7	; 27
		break;
    1284:	08 95       	ret
		break;
		case 1:
		Led1_WR(1);
		break;
		case 2:
		Led2_WR(1);
    1286:	db 9a       	sbi	0x1b, 3	; 27
		break;
    1288:	08 95       	ret
		case 3:
		Led3_WR(1);
    128a:	dc 9a       	sbi	0x1b, 4	; 27
		break;
    128c:	08 95       	ret

0000128e <_Z8resetLEDc>:
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	79 f0       	breq	.+30     	; 0x12b0 <_Z8resetLEDc+0x22>
    1292:	30 f0       	brcs	.+12     	; 0x12a0 <_Z8resetLEDc+0x12>
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	71 f0       	breq	.+28     	; 0x12b4 <_Z8resetLEDc+0x26>
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	41 f0       	breq	.+16     	; 0x12ac <_Z8resetLEDc+0x1e>
		break;
		case 4:
		Led4_WR(0);
		break;
		default :
		Led0_WR(0);
    129c:	d9 98       	cbi	0x1b, 1	; 27
    129e:	08 95       	ret
	return ;
}
//////////////////////////////////////////////////////////////////////////
void resetLED(char led_num)
{
	switch(led_num)
    12a0:	88 23       	and	r24, r24
    12a2:	e1 f3       	breq	.-8      	; 0x129c <_Z8resetLEDc+0xe>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	d1 f7       	brne	.-12     	; 0x129c <_Z8resetLEDc+0xe>
	{
		case 0:
		Led0_WR(0);
		break;
		case 1:
		Led1_WR(0);
    12a8:	da 98       	cbi	0x1b, 2	; 27
		break;
    12aa:	08 95       	ret
		break;
		case 3:
		Led3_WR(0);
		break;
		case 4:
		Led4_WR(0);
    12ac:	df 98       	cbi	0x1b, 7	; 27
		break;
    12ae:	08 95       	ret
		break;
		case 1:
		Led1_WR(0);
		break;
		case 2:
		Led2_WR(0);
    12b0:	db 98       	cbi	0x1b, 3	; 27
		break;
    12b2:	08 95       	ret
		case 3:
		Led3_WR(0);
    12b4:	dc 98       	cbi	0x1b, 4	; 27
		break;
    12b6:	08 95       	ret

000012b8 <_Z6loadBSv>:




void loadBS()
{
    12b8:	cf 93       	push	r28
	
	 eeprom_update_byte(&baseStationNumber , 2);
    12ba:	62 e0       	ldi	r22, 0x02	; 2
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__eeupd_byte_m32a>
	 eeprom_update_byte(&baseStationMACAddress , 2);
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__eeupd_byte_m32a>
	stationInfo.stationInfoStructure.startByte = '~';
    12ce:	8e e7       	ldi	r24, 0x7E	; 126
    12d0:	80 93 dd 01 	sts	0x01DD, r24
	stationInfo.stationInfoStructure.commandCode =8;
    12d4:	88 e0       	ldi	r24, 0x08	; 8
    12d6:	80 93 de 01 	sts	0x01DE, r24
	stationInfo.stationInfoStructure.stationNumber = eeprom_read_byte(&baseStationNumber);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__eerd_byte_m32a>
    12e2:	80 93 df 01 	sts	0x01DF, r24
	stationInfo.stationInfoStructure.voltage = 120 ;
    12e6:	88 e7       	ldi	r24, 0x78	; 120
    12e8:	80 93 e0 01 	sts	0x01E0, r24
	stationInfo.stationInfoStructure.current = 60;
    12ec:	8c e3       	ldi	r24, 0x3C	; 60
    12ee:	80 93 e1 01 	sts	0x01E1, r24
	stationInfo.stationInfoStructure.stability =48;
    12f2:	80 e3       	ldi	r24, 0x30	; 48
    12f4:	80 93 e2 01 	sts	0x01E2, r24
	stationInfo.stationInfoStructure.temperature = 75;
    12f8:	8b e4       	ldi	r24, 0x4B	; 75
    12fa:	80 93 e3 01 	sts	0x01E3, r24
	stationInfo.stationInfoStructure.humidity = 55;
    12fe:	c7 e3       	ldi	r28, 0x37	; 55
    1300:	c0 93 e4 01 	sts	0x01E4, r28
	stationInfo.stationInfoStructure.battery = 80 ;
    1304:	80 e5       	ldi	r24, 0x50	; 80
    1306:	80 93 e5 01 	sts	0x01E5, r24
	stationInfo.stationInfoStructure.lastLock =240;
    130a:	80 ef       	ldi	r24, 0xF0	; 240
    130c:	80 93 e6 01 	sts	0x01E6, r24
	stationInfo.stationInfoStructure.macNumber = eeprom_read_byte(&baseStationMACAddress);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__eerd_byte_m32a>
    1318:	80 93 e8 01 	sts	0x01E8, r24
	stationInfo.stationInfoStructure.xCordinate = 154870;
    131c:	86 ef       	ldi	r24, 0xF6	; 246
    131e:	9c e5       	ldi	r25, 0x5C	; 92
    1320:	a2 e0       	ldi	r26, 0x02	; 2
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	80 93 e9 01 	sts	0x01E9, r24
    1328:	90 93 ea 01 	sts	0x01EA, r25
    132c:	a0 93 eb 01 	sts	0x01EB, r26
    1330:	b0 93 ec 01 	sts	0x01EC, r27
	stationInfo.stationInfoStructure.yCordinate = 1542150;
    1334:	86 e0       	ldi	r24, 0x06	; 6
    1336:	98 e8       	ldi	r25, 0x88	; 136
    1338:	a7 e1       	ldi	r26, 0x17	; 23
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	80 93 ed 01 	sts	0x01ED, r24
    1340:	90 93 ee 01 	sts	0x01EE, r25
    1344:	a0 93 ef 01 	sts	0x01EF, r26
    1348:	b0 93 f0 01 	sts	0x01F0, r27
	stationInfo.stationInfoStructure.zCordinate = 2501540;
    134c:	84 ea       	ldi	r24, 0xA4	; 164
    134e:	9b e2       	ldi	r25, 0x2B	; 43
    1350:	a6 e2       	ldi	r26, 0x26	; 38
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	80 93 f1 01 	sts	0x01F1, r24
    1358:	90 93 f2 01 	sts	0x01F2, r25
    135c:	a0 93 f3 01 	sts	0x01F3, r26
    1360:	b0 93 f4 01 	sts	0x01F4, r27
	stationInfo.stationInfoStructure.time = 21581010;
    1364:	82 ed       	ldi	r24, 0xD2	; 210
    1366:	9c e4       	ldi	r25, 0x4C	; 76
    1368:	a9 e4       	ldi	r26, 0x49	; 73
    136a:	b1 e0       	ldi	r27, 0x01	; 1
    136c:	80 93 f5 01 	sts	0x01F5, r24
    1370:	90 93 f6 01 	sts	0x01F6, r25
    1374:	a0 93 f7 01 	sts	0x01F7, r26
    1378:	b0 93 f8 01 	sts	0x01F8, r27
	stationInfo.stationInfoStructure.statusFlag = 50;
    137c:	82 e3       	ldi	r24, 0x32	; 50
    137e:	80 93 e7 01 	sts	0x01E7, r24
	stationInfo.stationInfoStructure.assignFlyingObject = 4294949819;
    1382:	8b eb       	ldi	r24, 0xBB	; 187
    1384:	9b eb       	ldi	r25, 0xBB	; 187
    1386:	af ef       	ldi	r26, 0xFF	; 255
    1388:	bf ef       	ldi	r27, 0xFF	; 255
    138a:	80 93 f9 01 	sts	0x01F9, r24
    138e:	90 93 fa 01 	sts	0x01FA, r25
    1392:	a0 93 fb 01 	sts	0x01FB, r26
    1396:	b0 93 fc 01 	sts	0x01FC, r27
	stationInfo.stationInfoStructure.readyFlyingObject = 0xfffffb01;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	9b ef       	ldi	r25, 0xFB	; 251
    139e:	af ef       	ldi	r26, 0xFF	; 255
    13a0:	bf ef       	ldi	r27, 0xFF	; 255
    13a2:	80 93 fd 01 	sts	0x01FD, r24
    13a6:	90 93 fe 01 	sts	0x01FE, r25
    13aa:	a0 93 ff 01 	sts	0x01FF, r26
    13ae:	b0 93 00 02 	sts	0x0200, r27
	stationInfo.stationInfoStructure.snrValue[0] = 70;
    13b2:	96 e4       	ldi	r25, 0x46	; 70
    13b4:	90 93 05 02 	sts	0x0205, r25
	stationInfo.stationInfoStructure.snrValue[1] = 35;
    13b8:	83 e2       	ldi	r24, 0x23	; 35
    13ba:	80 93 06 02 	sts	0x0206, r24
	stationInfo.stationInfoStructure.snrValue[2] = 35;
    13be:	80 93 07 02 	sts	0x0207, r24
	stationInfo.stationInfoStructure.snrValue[3] = 55;
    13c2:	c0 93 08 02 	sts	0x0208, r28
	stationInfo.stationInfoStructure.snrValue[4] = 45;
    13c6:	2d e2       	ldi	r18, 0x2D	; 45
    13c8:	20 93 09 02 	sts	0x0209, r18
	stationInfo.stationInfoStructure.snrValue[5] = 25;
    13cc:	29 e1       	ldi	r18, 0x19	; 25
    13ce:	20 93 0a 02 	sts	0x020A, r18
	stationInfo.stationInfoStructure.snrValue[14] = 35;
    13d2:	80 93 13 02 	sts	0x0213, r24
	stationInfo.stationInfoStructure.snrValue[15] = 70;
    13d6:	90 93 14 02 	sts	0x0214, r25
	stationInfo.stationInfoStructure.LTRHealth = 0 ;
    13da:	10 92 15 02 	sts	0x0215, r1
	stationInfo.stationInfoStructure.crcByte = stationInfo.calculateCRC();
    13de:	8d ed       	ldi	r24, 0xDD	; 221
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN11StationInfo12calculateCRCEv>
    13e6:	90 93 17 02 	sts	0x0217, r25
    13ea:	80 93 16 02 	sts	0x0216, r24
}
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <_Z17setGlobalIntrruptv>:
	


void setGlobalIntrrupt()
{
	intrruptFlag =1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	80 93 dc 01 	sts	0x01DC, r24
	sei();
    13f8:	78 94       	sei
    13fa:	08 95       	ret

000013fc <_Z19resetGlobalIntrruptv>:
}

void resetGlobalIntrrupt()
{
	intrruptFlag =0;
    13fc:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    1400:	f8 94       	cli
    1402:	08 95       	ret

00001404 <_Z25resetAndStoreIntrruptFlagv>:
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    1404:	80 91 dc 01 	lds	r24, 0x01DC
	intrruptFlag = 0 ;
    1408:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    140c:	f8 94       	cli
	return temp;
}
    140e:	08 95       	ret

00001410 <_Z15restoreIntrruptc>:

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    1410:	81 11       	cpse	r24, r1
    1412:	04 c0       	rjmp	.+8      	; 0x141c <_Z15restoreIntrruptc+0xc>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    1414:	f8 94       	cli
		intrruptFlag = 0 ;
    1416:	10 92 dc 01 	sts	0x01DC, r1
    141a:	08 95       	ret

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
	{
		sei();
    141c:	78 94       	sei
		intrruptFlag = 1 ;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 dc 01 	sts	0x01DC, r24
    1424:	08 95       	ret

00001426 <_Z26processSerialReceivedBytesv>:


//////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
void processSerialReceivedBytes()
{
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	1f 92       	push	r1
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	static unsigned char receivedData[MAXIMUM_NUMBER_OF_DATA+4];
	static int counter=0;
	char temp , *structInfoPointer;
	
	if (serialRxDataBuffer.getFifoFullLength() == 0 )
    1434:	8b e1       	ldi	r24, 0x1B	; 27
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN4FIFO17getFifoFullLengthEv>
    143c:	89 2b       	or	r24, r25
    143e:	31 f4       	brne	.+12     	; 0x144c <_Z26processSerialReceivedBytesv+0x26>
		}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+2)
			counter = -1;
		counter++;
}
    1440:	0f 90       	pop	r0
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret
	static int counter=0;
	char temp , *structInfoPointer;
	
	if (serialRxDataBuffer.getFifoFullLength() == 0 )
		return;
	serialRxDataBuffer.readByte(temp);
    144c:	be 01       	movw	r22, r28
    144e:	6f 5f       	subi	r22, 0xFF	; 255
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8b e1       	ldi	r24, 0x1B	; 27
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN4FIFO8readByteERc>
	
	receivedData[counter] = temp;
    145a:	80 91 9a 01 	lds	r24, 0x019A
    145e:	90 91 9b 01 	lds	r25, 0x019B
    1462:	fc 01       	movw	r30, r24
    1464:	e4 56       	subi	r30, 0x64	; 100
    1466:	fe 4f       	sbci	r31, 0xFE	; 254
    1468:	29 81       	ldd	r18, Y+1	; 0x01
    146a:	20 83       	st	Z, r18
	//serial.putChar(counter);

	if (counter == 0 && receivedData[0] != '~')
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	89 f0       	breq	.+34     	; 0x1492 <_Z26processSerialReceivedBytesv+0x6c>
	//if (counter == 2 && receivedData[2] != 'M')
	//counter = -1;
	//if (counter == 3 && receivedData[3] != 'D')
	//counter = -1;

	if(counter>0)
    1470:	a4 f0       	brlt	.+40     	; 0x149a <_Z26processSerialReceivedBytesv+0x74>
	{
		switch(receivedData[1])
    1472:	20 91 9d 01 	lds	r18, 0x019D
    1476:	28 30       	cpi	r18, 0x08	; 8
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <_Z26processSerialReceivedBytesv+0x7e>
					{
						eeprom_update_byte(&baseStationNumber , receivedData[2]);
					}
					structInfoPointer[2] = receivedData[2];
										
					for (int i=0 ; i < sizeof(stationInfo.stationInfoStructure)-3 ; i++)	 //
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0

		}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+2)
			counter = -1;
		counter++;
    147e:	90 93 9b 01 	sts	0x019B, r25
    1482:	80 93 9a 01 	sts	0x019A, r24
}
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret
	serialRxDataBuffer.readByte(temp);
	
	receivedData[counter] = temp;
	//serial.putChar(counter);

	if (counter == 0 && receivedData[0] != '~')
    1492:	20 91 9c 01 	lds	r18, 0x019C
    1496:	2e 37       	cpi	r18, 0x7E	; 126
    1498:	81 f7       	brne	.-32     	; 0x147a <_Z26processSerialReceivedBytesv+0x54>

			}

		}

		if (counter>=MAXIMUM_NUMBER_OF_DATA+2)
    149a:	8e 33       	cpi	r24, 0x3E	; 62
    149c:	91 05       	cpc	r25, r1
    149e:	68 f7       	brcc	.-38     	; 0x147a <_Z26processSerialReceivedBytesv+0x54>
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	ed cf       	rjmp	.-38     	; 0x147e <_Z26processSerialReceivedBytesv+0x58>
			}
			break;/**/
			case BASE_STATION_INFO_MASSAGE_ID:
				 
				
				if (counter >= baseStationGetStatusInfoCount - 1)
    14a4:	8b 33       	cpi	r24, 0x3B	; 59
    14a6:	91 05       	cpc	r25, r1
    14a8:	d8 f3       	brcs	.-10     	; 0x14a0 <_Z26processSerialReceivedBytesv+0x7a>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    14aa:	8b b3       	in	r24, 0x1b	; 27
    14ac:	8b 7f       	andi	r24, 0xFB	; 251
    14ae:	ca 9b       	sbis	0x19, 2	; 25
    14b0:	35 c0       	rjmp	.+106    	; 0x151c <_Z26processSerialReceivedBytesv+0xf6>
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	89 2b       	or	r24, r25
    14b6:	8b bb       	out	0x1b, r24	; 27
				 
				
				if (counter >= baseStationGetStatusInfoCount - 1)
				{
					ToggleLED(1);
					structInfoPointer =  stationInfo.structStartPointer;
    14b8:	00 91 19 02 	lds	r16, 0x0219
    14bc:	10 91 1a 02 	lds	r17, 0x021A
					
					if (stationInfo.stationInfoStructure.stationNumber != receivedData[2])
    14c0:	60 91 9e 01 	lds	r22, 0x019E
    14c4:	80 91 df 01 	lds	r24, 0x01DF
    14c8:	86 17       	cp	r24, r22
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <_Z26processSerialReceivedBytesv+0xb2>
					{
						eeprom_update_byte(&baseStationNumber , receivedData[2]);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__eeupd_byte_m32a>
    14d4:	60 91 9e 01 	lds	r22, 0x019E
					}
					structInfoPointer[2] = receivedData[2];
    14d8:	f8 01       	movw	r30, r16
    14da:	62 83       	std	Z+2, r22	; 0x02
    14dc:	ef e9       	ldi	r30, 0x9F	; 159
    14de:	f1 e0       	ldi	r31, 0x01	; 1
										
					for (int i=0 ; i < sizeof(stationInfo.stationInfoStructure)-3 ; i++)	 //
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
					{
						structInfoPointer[i + 3] = 	receivedData[i + 3] ;
    14e8:	41 91       	ld	r20, Z+
    14ea:	d8 01       	movw	r26, r16
    14ec:	a2 0f       	add	r26, r18
    14ee:	b3 1f       	adc	r27, r19
    14f0:	13 96       	adiw	r26, 0x03	; 3
    14f2:	4c 93       	st	X, r20
					{
						eeprom_update_byte(&baseStationNumber , receivedData[2]);
					}
					structInfoPointer[2] = receivedData[2];
										
					for (int i=0 ; i < sizeof(stationInfo.stationInfoStructure)-3 ; i++)	 //
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	9c 01       	movw	r18, r24
    14f8:	89 33       	cpi	r24, 0x39	; 57
    14fa:	91 05       	cpc	r25, r1
    14fc:	a9 f7       	brne	.-22     	; 0x14e8 <_Z26processSerialReceivedBytesv+0xc2>
					{
						structInfoPointer[i + 3] = 	receivedData[i + 3] ;
					}
					stationInfo.stationInfoStructure.macNumber = eeprom_read_byte(&baseStationMACAddress);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__eerd_byte_m32a>
    1506:	80 93 e8 01 	sts	0x01E8, r24
					stationInfo.stationInfoStructure.crcByte = stationInfo.calculateCRC();
    150a:	8d ed       	ldi	r24, 0xDD	; 221
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN11StationInfo12calculateCRCEv>
    1512:	90 93 17 02 	sts	0x0217, r25
    1516:	80 93 16 02 	sts	0x0216, r24
    151a:	af cf       	rjmp	.-162    	; 0x147a <_Z26processSerialReceivedBytesv+0x54>
	{
		case 0:
		Led0_WR(!Led0_RD());
		break;
		case 1:
		Led1_WR(!Led1_RD());
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	ca cf       	rjmp	.-108    	; 0x14b4 <_Z26processSerialReceivedBytesv+0x8e>

00001520 <_Z13sendAckSignalv>:
			counter = -1;
		counter++;
}

void sendAckSignal()
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	2d 97       	sbiw	r28, 0x0d	; 13
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
	char intTemp;
	char ackData[13];
	ackData [0] = START_PACKET_BYTE;
    1538:	8e e7       	ldi	r24, 0x7E	; 126
    153a:	89 83       	std	Y+1, r24	; 0x01
	ackData[1] = ACK_CODE;
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	8a 83       	std	Y+2, r24	; 0x02
	ackData[2] = stationInfo.stationInfoStructure.stationNumber;
    1540:	80 91 df 01 	lds	r24, 0x01DF
    1544:	8b 83       	std	Y+3, r24	; 0x03
	ackData[3] = 1;
    1546:	11 e0       	ldi	r17, 0x01	; 1
    1548:	1c 83       	std	Y+4, r17	; 0x04
	ackData[4] = 'A';
    154a:	81 e4       	ldi	r24, 0x41	; 65
    154c:	8d 83       	std	Y+5, r24	; 0x05
	ackData[5] = 'C';
    154e:	83 e4       	ldi	r24, 0x43	; 67
    1550:	8e 83       	std	Y+6, r24	; 0x06
	ackData[6] = 'K';
    1552:	8b e4       	ldi	r24, 0x4B	; 75
    1554:	8f 83       	std	Y+7, r24	; 0x07
	ackData[7] = 0;
    1556:	18 86       	std	Y+8, r1	; 0x08
	ackData[8] = 0;
    1558:	19 86       	std	Y+9, r1	; 0x09
	ackData[9] = 0;
    155a:	1a 86       	std	Y+10, r1	; 0x0a
	ackData[10] = 0;
    155c:	1b 86       	std	Y+11, r1	; 0x0b
	ackData[11] = 0;
    155e:	1c 86       	std	Y+12, r1	; 0x0c
	ackData[12] = 0;
    1560:	1d 86       	std	Y+13, r1	; 0x0d
	cli();
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    1562:	00 91 dc 01 	lds	r16, 0x01DC
	intrruptFlag = 0 ;
    1566:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    156a:	f8 94       	cli
	
	
	
	intTemp = resetAndStoreIntrruptFlag();
	
	transceiver.changeMode();
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
	packetProcessor.createPacket(ackData,13 , packetData );
    1574:	27 e5       	ldi	r18, 0x57	; 87
    1576:	31 e0       	ldi	r19, 0x01	; 1
    1578:	4d e0       	ldi	r20, 0x0D	; 13
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	be 01       	movw	r22, r28
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8d e8       	ldi	r24, 0x8D	; 141
    1584:	93 e0       	ldi	r25, 0x03	; 3
    1586:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN6Packet12createPacketEPciS0_>
	transceiver.writePacket(packetData);
    158a:	67 e5       	ldi	r22, 0x57	; 87
    158c:	71 e0       	ldi	r23, 0x01	; 1
    158e:	85 e0       	ldi	r24, 0x05	; 5
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN11Transceiver11writePacketEPc>
	GIFR &= 0x1F;
    1596:	8a b7       	in	r24, 0x3a	; 58
    1598:	8f 71       	andi	r24, 0x1F	; 31
    159a:	8a bf       	out	0x3a, r24	; 58
	return temp;
}

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    159c:	01 11       	cpse	r16, r1
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <_Z13sendAckSignalv+0x9c>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    15a0:	f8 94       	cli
		intrruptFlag = 0 ;
    15a2:	10 92 dc 01 	sts	0x01DC, r1
	transceiver.changeMode();
	packetProcessor.createPacket(ackData,13 , packetData );
	transceiver.writePacket(packetData);
	GIFR &= 0x1F;
	restoreIntrrupt(intTemp);
}
    15a6:	2d 96       	adiw	r28, 0x0d	; 13
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
	{
		sei();
    15bc:	78 94       	sei
		intrruptFlag = 1 ;
    15be:	10 93 dc 01 	sts	0x01DC, r17
    15c2:	f1 cf       	rjmp	.-30     	; 0x15a6 <_Z13sendAckSignalv+0x86>

000015c4 <_Z19receivedDataProcessPci>:
	stationInfo.stationInfoStructure.crcByte = stationInfo.calculateCRC();
}


void receivedDataProcess(char* receivedPacket, int dataLength)
{
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	2e 97       	sbiw	r28, 0x0e	; 14
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	8c 01       	movw	r16, r24
	char commandCode=0, LTRcommandLength=0 , intTemp;
	static unsigned char i;
		if(receivedPacket[0] == START_PACKET_BYTE)
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 81       	ld	r18, Z
    15e4:	2e 37       	cpi	r18, 0x7E	; 126
    15e6:	61 f0       	breq	.+24     	; 0x1600 <_Z19receivedDataProcessPci+0x3c>
			}

		}
	
	return;
}
    15e8:	2e 96       	adiw	r28, 0x0e	; 14
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	08 95       	ret
{
	char commandCode=0, LTRcommandLength=0 , intTemp;
	static unsigned char i;
		if(receivedPacket[0] == START_PACKET_BYTE)
		{
			commandCode = receivedPacket[1];
    1600:	81 81       	ldd	r24, Z+1	; 0x01
			if (commandCode == GET_STATUS_BASED_ON_MAC_CMD )
    1602:	84 32       	cpi	r24, 0x24	; 36
    1604:	09 f4       	brne	.+2      	; 0x1608 <_Z19receivedDataProcessPci+0x44>
    1606:	5f c0       	rjmp	.+190    	; 0x16c6 <_Z19receivedDataProcessPci+0x102>
				}
				return ;
				
			}
			
			if(receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber)
    1608:	f8 01       	movw	r30, r16
    160a:	32 81       	ldd	r19, Z+2	; 0x02
    160c:	90 91 df 01 	lds	r25, 0x01DF
    1610:	39 13       	cpse	r19, r25
    1612:	ea cf       	rjmp	.-44     	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
			{
				switch(commandCode)
    1614:	81 32       	cpi	r24, 0x21	; 33
    1616:	09 f4       	brne	.+2      	; 0x161a <_Z19receivedDataProcessPci+0x56>
    1618:	85 c0       	rjmp	.+266    	; 0x1724 <_Z19receivedDataProcessPci+0x160>
    161a:	08 f0       	brcs	.+2      	; 0x161e <_Z19receivedDataProcessPci+0x5a>
    161c:	6b c0       	rjmp	.+214    	; 0x16f4 <_Z19receivedDataProcessPci+0x130>
    161e:	8c 31       	cpi	r24, 0x1C	; 28
    1620:	09 f4       	brne	.+2      	; 0x1624 <_Z19receivedDataProcessPci+0x60>
    1622:	36 c1       	rjmp	.+620    	; 0x1890 <_Z19receivedDataProcessPci+0x2cc>
    1624:	08 f0       	brcs	.+2      	; 0x1628 <_Z19receivedDataProcessPci+0x64>
    1626:	df c0       	rjmp	.+446    	; 0x17e6 <_Z19receivedDataProcessPci+0x222>
    1628:	81 31       	cpi	r24, 0x11	; 17
    162a:	09 f4       	brne	.+2      	; 0x162e <_Z19receivedDataProcessPci+0x6a>
    162c:	ec c0       	rjmp	.+472    	; 0x1806 <_Z19receivedDataProcessPci+0x242>
    162e:	8b 31       	cpi	r24, 0x1B	; 27
    1630:	d9 f6       	brne	.-74     	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						serialTxDataBuffer.writeString("$CMD",4);
						serialTxDataBuffer.writeString(receivedPacket + 1 , setRangeOffsetCommandCount + 2);
						sendAckSignal();
					break;
					case BASE_STATION_SET_TIME_CMD:
						serialTxDataBuffer.writeString("$CMD",4);
    1632:	44 e0       	ldi	r20, 0x04	; 4
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	60 e6       	ldi	r22, 0x60	; 96
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	80 e9       	ldi	r24, 0x90	; 144
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	2e 87       	std	Y+14, r18	; 0x0e
    1640:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , baseStationSetTimeCommandCount + 2);
    1644:	b8 01       	movw	r22, r16
    1646:	6f 5f       	subi	r22, 0xFF	; 255
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	4a e0       	ldi	r20, 0x0A	; 10
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	80 e9       	ldi	r24, 0x90	; 144
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>

void sendAckSignal()
{
	char intTemp;
	char ackData[13];
	ackData [0] = START_PACKET_BYTE;
    1656:	2e 85       	ldd	r18, Y+14	; 0x0e
    1658:	29 83       	std	Y+1, r18	; 0x01
	ackData[1] = ACK_CODE;
    165a:	8a e0       	ldi	r24, 0x0A	; 10
    165c:	8a 83       	std	Y+2, r24	; 0x02
	ackData[2] = stationInfo.stationInfoStructure.stationNumber;
    165e:	80 91 df 01 	lds	r24, 0x01DF
    1662:	8b 83       	std	Y+3, r24	; 0x03
	ackData[3] = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8c 83       	std	Y+4, r24	; 0x04
	ackData[4] = 'A';
    1668:	81 e4       	ldi	r24, 0x41	; 65
    166a:	8d 83       	std	Y+5, r24	; 0x05
	ackData[5] = 'C';
    166c:	83 e4       	ldi	r24, 0x43	; 67
    166e:	8e 83       	std	Y+6, r24	; 0x06
	ackData[6] = 'K';
    1670:	8b e4       	ldi	r24, 0x4B	; 75
    1672:	8f 83       	std	Y+7, r24	; 0x07
	ackData[7] = 0;
    1674:	18 86       	std	Y+8, r1	; 0x08
	ackData[8] = 0;
    1676:	19 86       	std	Y+9, r1	; 0x09
	ackData[9] = 0;
    1678:	1a 86       	std	Y+10, r1	; 0x0a
	ackData[10] = 0;
    167a:	1b 86       	std	Y+11, r1	; 0x0b
	ackData[11] = 0;
    167c:	1c 86       	std	Y+12, r1	; 0x0c
	ackData[12] = 0;
    167e:	1d 86       	std	Y+13, r1	; 0x0d
	cli();
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    1680:	10 91 dc 01 	lds	r17, 0x01DC
	intrruptFlag = 0 ;
    1684:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    1688:	f8 94       	cli
	
	
	
	intTemp = resetAndStoreIntrruptFlag();
	
	transceiver.changeMode();
    168a:	85 e0       	ldi	r24, 0x05	; 5
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
	packetProcessor.createPacket(ackData,13 , packetData );
    1692:	27 e5       	ldi	r18, 0x57	; 87
    1694:	31 e0       	ldi	r19, 0x01	; 1
    1696:	4d e0       	ldi	r20, 0x0D	; 13
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8d e8       	ldi	r24, 0x8D	; 141
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN6Packet12createPacketEPciS0_>
	transceiver.writePacket(packetData);
    16a8:	67 e5       	ldi	r22, 0x57	; 87
    16aa:	71 e0       	ldi	r23, 0x01	; 1
    16ac:	85 e0       	ldi	r24, 0x05	; 5
    16ae:	93 e0       	ldi	r25, 0x03	; 3
    16b0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN11Transceiver11writePacketEPc>
	GIFR &= 0x1F;
    16b4:	8a b7       	in	r24, 0x3a	; 58
    16b6:	8f 71       	andi	r24, 0x1F	; 31
    16b8:	8a bf       	out	0x3a, r24	; 58
	return temp;
}

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    16ba:	11 11       	cpse	r17, r1
    16bc:	7e c0       	rjmp	.+252    	; 0x17ba <_Z19receivedDataProcessPci+0x1f6>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    16be:	f8 94       	cli
		intrruptFlag = 0 ;
    16c0:	10 92 dc 01 	sts	0x01DC, r1
    16c4:	91 cf       	rjmp	.-222    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
		if(receivedPacket[0] == START_PACKET_BYTE)
		{
			commandCode = receivedPacket[1];
			if (commandCode == GET_STATUS_BASED_ON_MAC_CMD )
			{
				if (receivedPacket[2] == stationInfo.stationInfoStructure.macNumber)
    16c6:	92 81       	ldd	r25, Z+2	; 0x02
    16c8:	80 91 e8 01 	lds	r24, 0x01E8
    16cc:	98 13       	cpse	r25, r24
    16ce:	8c cf       	rjmp	.-232    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
	cli();
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    16d0:	10 91 dc 01 	lds	r17, 0x01DC
	intrruptFlag = 0 ;
    16d4:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    16d8:	f8 94       	cli
			if (commandCode == GET_STATUS_BASED_ON_MAC_CMD )
			{
				if (receivedPacket[2] == stationInfo.stationInfoStructure.macNumber)
				{
					intTemp = resetAndStoreIntrruptFlag();
					transceiver.changeMode();
    16da:	85 e0       	ldi	r24, 0x05	; 5
    16dc:	93 e0       	ldi	r25, 0x03	; 3
    16de:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
					packetProcessor.createPacket(stationInfo.structStartPointer , sizeof(stationInfo.stationInfoStructure) , packetData );
    16e2:	60 91 19 02 	lds	r22, 0x0219
    16e6:	70 91 1a 02 	lds	r23, 0x021A
    16ea:	27 e5       	ldi	r18, 0x57	; 87
    16ec:	31 e0       	ldi	r19, 0x01	; 1
    16ee:	4c e3       	ldi	r20, 0x3C	; 60
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	d6 cf       	rjmp	.-84     	; 0x16a0 <_Z19receivedDataProcessPci+0xdc>
				
			}
			
			if(receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber)
			{
				switch(commandCode)
    16f4:	85 32       	cpi	r24, 0x25	; 37
    16f6:	b1 f0       	breq	.+44     	; 0x1724 <_Z19receivedDataProcessPci+0x160>
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <_Z19receivedDataProcessPci+0x138>
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <_Z19receivedDataProcessPci+0x200>
    16fc:	82 32       	cpi	r24, 0x22	; 34
    16fe:	91 f0       	breq	.+36     	; 0x1724 <_Z19receivedDataProcessPci+0x160>
    1700:	83 32       	cpi	r24, 0x23	; 35
    1702:	09 f0       	breq	.+2      	; 0x1706 <_Z19receivedDataProcessPci+0x142>
    1704:	71 cf       	rjmp	.-286    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						serialTxDataBuffer.writeString("$CMD",4);
						serialTxDataBuffer.writeString(receivedPacket + 1 , changeBseStationPositioningModeCommandCount + 2);
						sendAckSignal();
					break;
					case SET_RANGE_OFFSET_CMD:
						serialTxDataBuffer.writeString("$CMD",4);
    1706:	44 e0       	ldi	r20, 0x04	; 4
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	60 e6       	ldi	r22, 0x60	; 96
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e9       	ldi	r24, 0x90	; 144
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	2e 87       	std	Y+14, r18	; 0x0e
    1714:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , setRangeOffsetCommandCount + 2);
    1718:	b8 01       	movw	r22, r16
    171a:	6f 5f       	subi	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	46 e0       	ldi	r20, 0x06	; 6
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	95 cf       	rjmp	.-214    	; 0x164e <_Z19receivedDataProcessPci+0x8a>
						serialTxDataBuffer.writeString("$CMD",4);
						serialTxDataBuffer.writeString(receivedPacket + 1 , changeBaseStationNumberCommandCount + 2);
						sendAckSignal();
					break;
					case SET_LTR_TX_POWER_LEVEL_CMD:
						serialTxDataBuffer.writeString("$CMD",4);
    1724:	44 e0       	ldi	r20, 0x04	; 4
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	60 e6       	ldi	r22, 0x60	; 96
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	80 e9       	ldi	r24, 0x90	; 144
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	2e 87       	std	Y+14, r18	; 0x0e
    1732:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , setLTRTxPowerLevelCommandCount + 2);
    1736:	b8 01       	movw	r22, r16
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	44 e0       	ldi	r20, 0x04	; 4
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	80 e9       	ldi	r24, 0x90	; 144
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>

void sendAckSignal()
{
	char intTemp;
	char ackData[13];
	ackData [0] = START_PACKET_BYTE;
    1748:	2e 85       	ldd	r18, Y+14	; 0x0e
    174a:	29 83       	std	Y+1, r18	; 0x01
	ackData[1] = ACK_CODE;
    174c:	8a e0       	ldi	r24, 0x0A	; 10
    174e:	8a 83       	std	Y+2, r24	; 0x02
	ackData[2] = stationInfo.stationInfoStructure.stationNumber;
    1750:	80 91 df 01 	lds	r24, 0x01DF
    1754:	8b 83       	std	Y+3, r24	; 0x03
	ackData[3] = 1;
    1756:	11 e0       	ldi	r17, 0x01	; 1
    1758:	1c 83       	std	Y+4, r17	; 0x04
	ackData[4] = 'A';
    175a:	81 e4       	ldi	r24, 0x41	; 65
    175c:	8d 83       	std	Y+5, r24	; 0x05
	ackData[5] = 'C';
    175e:	83 e4       	ldi	r24, 0x43	; 67
    1760:	8e 83       	std	Y+6, r24	; 0x06
	ackData[6] = 'K';
    1762:	8b e4       	ldi	r24, 0x4B	; 75
    1764:	8f 83       	std	Y+7, r24	; 0x07
	ackData[7] = 0;
    1766:	18 86       	std	Y+8, r1	; 0x08
	ackData[8] = 0;
    1768:	19 86       	std	Y+9, r1	; 0x09
	ackData[9] = 0;
    176a:	1a 86       	std	Y+10, r1	; 0x0a
	ackData[10] = 0;
    176c:	1b 86       	std	Y+11, r1	; 0x0b
	ackData[11] = 0;
    176e:	1c 86       	std	Y+12, r1	; 0x0c
	ackData[12] = 0;
    1770:	1d 86       	std	Y+13, r1	; 0x0d
	cli();
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    1772:	00 91 dc 01 	lds	r16, 0x01DC
	intrruptFlag = 0 ;
    1776:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    177a:	f8 94       	cli
	
	
	
	intTemp = resetAndStoreIntrruptFlag();
	
	transceiver.changeMode();
    177c:	85 e0       	ldi	r24, 0x05	; 5
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
	packetProcessor.createPacket(ackData,13 , packetData );
    1784:	27 e5       	ldi	r18, 0x57	; 87
    1786:	31 e0       	ldi	r19, 0x01	; 1
    1788:	4d e0       	ldi	r20, 0x0D	; 13
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	be 01       	movw	r22, r28
    178e:	6f 5f       	subi	r22, 0xFF	; 255
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8d e8       	ldi	r24, 0x8D	; 141
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN6Packet12createPacketEPciS0_>
	transceiver.writePacket(packetData);
    179a:	67 e5       	ldi	r22, 0x57	; 87
    179c:	71 e0       	ldi	r23, 0x01	; 1
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN11Transceiver11writePacketEPc>
	GIFR &= 0x1F;
    17a6:	8a b7       	in	r24, 0x3a	; 58
    17a8:	8f 71       	andi	r24, 0x1F	; 31
    17aa:	8a bf       	out	0x3a, r24	; 58
	return temp;
}

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    17ac:	00 23       	and	r16, r16
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <_Z19receivedDataProcessPci+0x1ee>
    17b0:	86 cf       	rjmp	.-244    	; 0x16be <_Z19receivedDataProcessPci+0xfa>
	{
		sei();
    17b2:	78 94       	sei
		intrruptFlag = 1 ;
    17b4:	10 93 dc 01 	sts	0x01DC, r17
    17b8:	17 cf       	rjmp	.-466    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
	{
		sei();
    17ba:	78 94       	sei
		intrruptFlag = 1 ;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 dc 01 	sts	0x01DC, r24
    17c2:	12 cf       	rjmp	.-476    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
				
			}
			
			if(receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber)
			{
				switch(commandCode)
    17c4:	86 32       	cpi	r24, 0x26	; 38
    17c6:	09 f4       	brne	.+2      	; 0x17ca <_Z19receivedDataProcessPci+0x206>
    17c8:	76 c0       	rjmp	.+236    	; 0x18b6 <_Z19receivedDataProcessPci+0x2f2>
    17ca:	83 34       	cpi	r24, 0x43	; 67
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <_Z19receivedDataProcessPci+0x20c>
    17ce:	0c cf       	rjmp	.-488    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						serialTxDataBuffer.writeString(receivedPacket + 1 , baseStationGetStatusCommandCount + 2);
						break;
					
					case LTR_CMD:
						LTRcommandLength=receivedPacket[3];
						serialTxDataBuffer.writeString(receivedPacket + 4 , LTRcommandLength);
    17d0:	f8 01       	movw	r30, r16
    17d2:	43 81       	ldd	r20, Z+3	; 0x03
    17d4:	b8 01       	movw	r22, r16
    17d6:	6c 5f       	subi	r22, 0xFC	; 252
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	80 e9       	ldi	r24, 0x90	; 144
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						break;
    17e4:	01 cf       	rjmp	.-510    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
				
			}
			
			if(receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber)
			{
				switch(commandCode)
    17e6:	8d 31       	cpi	r24, 0x1D	; 29
    17e8:	e9 f0       	breq	.+58     	; 0x1824 <_Z19receivedDataProcessPci+0x260>
    17ea:	8e 31       	cpi	r24, 0x1E	; 30
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <_Z19receivedDataProcessPci+0x22c>
    17ee:	fc ce       	rjmp	.-520    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						serialTxDataBuffer.writeString(receivedPacket + 4 , LTRcommandLength);
						break;
					case BASE_STATION_RESET_LTR_CMD:
						if (receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber )
						{
							REMOTE_ON_OFF(0);
    17f0:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17f2:	8f e4       	ldi	r24, 0x4F	; 79
    17f4:	93 ec       	ldi	r25, 0xC3	; 195
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <_Z19receivedDataProcessPci+0x232>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <_Z19receivedDataProcessPci+0x238>
    17fc:	00 00       	nop
							_delay_ms(200);
							REMOTE_ON_OFF(1);
    17fe:	c4 9a       	sbi	0x18, 4	; 24
							sendAckSignal();
    1800:	0e 94 90 0a 	call	0x1520	; 0x1520 <_Z13sendAckSignalv>
    1804:	f1 ce       	rjmp	.-542    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						}	 
					break;
					case SAVE_SETTING_CMD:
						serialTxDataBuffer.writeString("$CMD",4);
    1806:	44 e0       	ldi	r20, 0x04	; 4
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e6       	ldi	r22, 0x60	; 96
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	80 e9       	ldi	r24, 0x90	; 144
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	2e 87       	std	Y+14, r18	; 0x0e
    1814:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , saveSettingsCommandCount + 2);
    1818:	b8 01       	movw	r22, r16
    181a:	6f 5f       	subi	r22, 0xFF	; 255
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	43 e0       	ldi	r20, 0x03	; 3
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	8e cf       	rjmp	.-228    	; 0x1740 <_Z19receivedDataProcessPci+0x17c>
	cli();
}

char resetAndStoreIntrruptFlag()
{
	char temp=intrruptFlag;
    1824:	f0 90 dc 01 	lds	r15, 0x01DC
	intrruptFlag = 0 ;
    1828:	10 92 dc 01 	sts	0x01DC, r1
	cli();
    182c:	f8 94       	cli
			{
				switch(commandCode)
				{
					case BASE_STATION_GET_STATUS_CMD:
						intTemp = resetAndStoreIntrruptFlag();
						transceiver.changeMode();
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
						packetProcessor.createPacket(stationInfo.structStartPointer , sizeof(stationInfo.stationInfoStructure) , packetData );
    1836:	60 91 19 02 	lds	r22, 0x0219
    183a:	70 91 1a 02 	lds	r23, 0x021A
    183e:	27 e5       	ldi	r18, 0x57	; 87
    1840:	31 e0       	ldi	r19, 0x01	; 1
    1842:	4c e3       	ldi	r20, 0x3C	; 60
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	8d e8       	ldi	r24, 0x8D	; 141
    1848:	93 e0       	ldi	r25, 0x03	; 3
    184a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN6Packet12createPacketEPciS0_>
						transceiver.writePacket(packetData);
    184e:	67 e5       	ldi	r22, 0x57	; 87
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	85 e0       	ldi	r24, 0x05	; 5
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN11Transceiver11writePacketEPc>
						GIFR &= 0x1F;
    185a:	8a b7       	in	r24, 0x3a	; 58
    185c:	8f 71       	andi	r24, 0x1F	; 31
    185e:	8a bf       	out	0x3a, r24	; 58
	return temp;
}

void restoreIntrrupt(char intFlag)
{
	if (intFlag)
    1860:	ff 20       	and	r15, r15
    1862:	29 f1       	breq	.+74     	; 0x18ae <_Z19receivedDataProcessPci+0x2ea>
	{
		sei();
    1864:	78 94       	sei
		intrruptFlag = 1 ;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 dc 01 	sts	0x01DC, r24
						transceiver.changeMode();
						packetProcessor.createPacket(stationInfo.structStartPointer , sizeof(stationInfo.stationInfoStructure) , packetData );
						transceiver.writePacket(packetData);
						GIFR &= 0x1F;
						restoreIntrrupt(intTemp);
						serialTxDataBuffer.writeString("$CMD",4);
    186c:	44 e0       	ldi	r20, 0x04	; 4
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	60 e6       	ldi	r22, 0x60	; 96
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	80 e9       	ldi	r24, 0x90	; 144
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , baseStationGetStatusCommandCount + 2);
    187c:	b8 01       	movw	r22, r16
    187e:	6f 5f       	subi	r22, 0xFF	; 255
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	43 e0       	ldi	r20, 0x03	; 3
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	80 e9       	ldi	r24, 0x90	; 144
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						break;
    188e:	ac ce       	rjmp	.-680    	; 0x15e8 <_Z19receivedDataProcessPci+0x24>
						serialTxDataBuffer.writeString("$CMD",4);
						serialTxDataBuffer.writeString(receivedPacket + 1 , saveSettingsCommandCount + 2);
						sendAckSignal();
					break;
					case BASE_STATION_SET_POS_CMD:
						serialTxDataBuffer.writeString("$CMD",4);
    1890:	44 e0       	ldi	r20, 0x04	; 4
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	60 e6       	ldi	r22, 0x60	; 96
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	80 e9       	ldi	r24, 0x90	; 144
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	2e 87       	std	Y+14, r18	; 0x0e
    189e:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
						serialTxDataBuffer.writeString(receivedPacket + 1 , baseStationSetPositionCommandCount + 2);
    18a2:	b8 01       	movw	r22, r16
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	4f e0       	ldi	r20, 0x0F	; 15
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	49 cf       	rjmp	.-366    	; 0x1740 <_Z19receivedDataProcessPci+0x17c>
		sei();
		intrruptFlag = 1 ;
	}
	else
	{
		cli();
    18ae:	f8 94       	cli
		intrruptFlag = 0 ;
    18b0:	10 92 dc 01 	sts	0x01DC, r1
    18b4:	db cf       	rjmp	.-74     	; 0x186c <_Z19receivedDataProcessPci+0x2a8>
						sendAckSignal();
					break;
					case TURN_ON_OFF_LTR_CMD:
						if (receivedPacket[2] == stationInfo.stationInfoStructure.stationNumber )
						{
							if(receivedPacket[3])
    18b6:	f8 01       	movw	r30, r16
    18b8:	83 81       	ldd	r24, Z+3	; 0x03
    18ba:	88 23       	and	r24, r24
    18bc:	39 f0       	breq	.+14     	; 0x18cc <_Z19receivedDataProcessPci+0x308>
							{
								REMOTE_ON_OFF(1);
    18be:	c4 9a       	sbi	0x18, 4	; 24

void sendAckSignal()
{
	char intTemp;
	char ackData[13];
	ackData [0] = START_PACKET_BYTE;
    18c0:	8e e7       	ldi	r24, 0x7E	; 126
    18c2:	89 83       	std	Y+1, r24	; 0x01
	ackData[1] = ACK_CODE;
    18c4:	8a e0       	ldi	r24, 0x0A	; 10
    18c6:	8a 83       	std	Y+2, r24	; 0x02
	ackData[2] = stationInfo.stationInfoStructure.stationNumber;
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	45 cf       	rjmp	.-374    	; 0x1756 <_Z19receivedDataProcessPci+0x192>
							{
								REMOTE_ON_OFF(1);
							}
							else
							{
								REMOTE_ON_OFF(0);
    18cc:	c4 98       	cbi	0x18, 4	; 24
								stationInfo.stationInfoStructure.LTRHealth = 0;
    18ce:	10 92 15 02 	sts	0x0215, r1
    18d2:	f6 cf       	rjmp	.-20     	; 0x18c0 <_Z19receivedDataProcessPci+0x2fc>

000018d4 <_Z41__static_initialization_and_destruction_0ii.part.0>:

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
StationInfo stationInfo;
    18d4:	8d ed       	ldi	r24, 0xDD	; 221
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN11StationInfoD1Ev>
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;

FIFO serialTxDataBuffer,serialRxDataBuffer;
    18dc:	8b e1       	ldi	r24, 0x1B	; 27
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN4FIFOD1Ev>
    18e4:	80 e9       	ldi	r24, 0x90	; 144
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN4FIFOD1Ev>
//Message message;
//Station stations[10];
Packet packetProcessor;

//ADF7020 Board0 ;
Transceiver transceiver;
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN11TransceiverD1Ev>
#include "ADF7020.h"

Serial serial;
//Message message;
//Station stations[10];
Packet packetProcessor;
    18f4:	8d e8       	ldi	r24, 0x8D	; 141
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <_ZN6PacketD1Ev>

000018fc <_GLOBAL__sub_I_serial>:
    18fc:	8d e8       	ldi	r24, 0x8D	; 141
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN6PacketC1Ev>

//ADF7020 Board0 ;
Transceiver transceiver;
    1904:	85 e0       	ldi	r24, 0x05	; 5
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <_ZN11TransceiverC1Ev>

FIFO serialTxDataBuffer,serialRxDataBuffer;
    190c:	80 e9       	ldi	r24, 0x90	; 144
    190e:	92 e0       	ldi	r25, 0x02	; 2
    1910:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN4FIFOC1Ev>
    1914:	8b e1       	ldi	r24, 0x1B	; 27
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN4FIFOC1Ev>
StationInfo stationInfo;
    191c:	8d ed       	ldi	r24, 0xDD	; 221
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <_ZN11StationInfoC1Ev>

00001924 <_GLOBAL__sub_D_serial>:

int test_index;
char intrruptFlag;
    1924:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_Z41__static_initialization_and_destruction_0ii.part.0>

00001928 <main>:


char receivedPacket[PACKET_LENGTH +1],command[PACKET_LENGTH+ 1] ,commandPacket[PACKET_LENGTH + 1] ;

int main(void)
{
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 d0       	rcall	.+0      	; 0x192e <main+0x6>
    192e:	1f 92       	push	r1
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	int ret;

	//rssivalue = 0x3BF;
	//ret = transceiver.calculateRSSI(rssivalue);
	
	loadBS();
    1934:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_Z6loadBSv>
	
	serial.init(19200);
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	7b e4       	ldi	r23, 0x4B	; 75
    193c:	85 e9       	ldi	r24, 0x95	; 149
    193e:	93 e0       	ldi	r25, 0x03	; 3
    1940:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN6Serial4initEi>
	
	micro_Initialize();
    1944:	0e 94 df 08 	call	0x11be	; 0x11be <_Z16micro_Initializev>
	
	resetGlobalIntrrupt();
    1948:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z19resetGlobalIntrruptv>
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	85 e0       	ldi	r24, 0x05	; 5
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN11Transceiver7setModeE14TranceiverMode>

	for (i=0;i<3 ;i++)
	{
		setLED(0);
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
    195c:	2f e7       	ldi	r18, 0x7F	; 127
    195e:	88 e3       	ldi	r24, 0x38	; 56
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	80 40       	sbci	r24, 0x00	; 0
    1966:	90 40       	sbci	r25, 0x00	; 0
    1968:	e1 f7       	brne	.-8      	; 0x1962 <main+0x3a>
    196a:	00 c0       	rjmp	.+0      	; 0x196c <main+0x44>
    196c:	00 00       	nop
		_delay_ms(50);
		resetLED(0);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	0e 94 47 09 	call	0x128e	; 0x128e <_Z8resetLEDc>
    1974:	2f e7       	ldi	r18, 0x7F	; 127
    1976:	88 e3       	ldi	r24, 0x38	; 56
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	21 50       	subi	r18, 0x01	; 1
    197c:	80 40       	sbci	r24, 0x00	; 0
    197e:	90 40       	sbci	r25, 0x00	; 0
    1980:	e1 f7       	brne	.-8      	; 0x197a <main+0x52>
    1982:	00 c0       	rjmp	.+0      	; 0x1984 <main+0x5c>
    1984:	00 00       	nop
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);

	for (i=0;i<3 ;i++)
	{
		setLED(0);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
    198c:	2f e7       	ldi	r18, 0x7F	; 127
    198e:	88 e3       	ldi	r24, 0x38	; 56
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	21 50       	subi	r18, 0x01	; 1
    1994:	80 40       	sbci	r24, 0x00	; 0
    1996:	90 40       	sbci	r25, 0x00	; 0
    1998:	e1 f7       	brne	.-8      	; 0x1992 <main+0x6a>
    199a:	00 c0       	rjmp	.+0      	; 0x199c <main+0x74>
    199c:	00 00       	nop
		_delay_ms(50);
		resetLED(0);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	0e 94 47 09 	call	0x128e	; 0x128e <_Z8resetLEDc>
    19a4:	2f e7       	ldi	r18, 0x7F	; 127
    19a6:	88 e3       	ldi	r24, 0x38	; 56
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	21 50       	subi	r18, 0x01	; 1
    19ac:	80 40       	sbci	r24, 0x00	; 0
    19ae:	90 40       	sbci	r25, 0x00	; 0
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <main+0x82>
    19b2:	00 c0       	rjmp	.+0      	; 0x19b4 <main+0x8c>
    19b4:	00 00       	nop
	
	transceiver.setMode(TRANSCEIVER_MODE_RECEIVER);

	for (i=0;i<3 ;i++)
	{
		setLED(0);
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
    19bc:	2f e7       	ldi	r18, 0x7F	; 127
    19be:	88 e3       	ldi	r24, 0x38	; 56
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	21 50       	subi	r18, 0x01	; 1
    19c4:	80 40       	sbci	r24, 0x00	; 0
    19c6:	90 40       	sbci	r25, 0x00	; 0
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <main+0x9a>
    19ca:	00 c0       	rjmp	.+0      	; 0x19cc <main+0xa4>
    19cc:	00 00       	nop
		_delay_ms(50);
		resetLED(0);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	0e 94 47 09 	call	0x128e	; 0x128e <_Z8resetLEDc>
    19d4:	2f e7       	ldi	r18, 0x7F	; 127
    19d6:	88 e3       	ldi	r24, 0x38	; 56
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	21 50       	subi	r18, 0x01	; 1
    19dc:	80 40       	sbci	r24, 0x00	; 0
    19de:	90 40       	sbci	r25, 0x00	; 0
    19e0:	e1 f7       	brne	.-8      	; 0x19da <main+0xb2>
    19e2:	00 c0       	rjmp	.+0      	; 0x19e4 <main+0xbc>
    19e4:	00 00       	nop
		_delay_ms(50);
	}
	resetLED(0);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0e 94 47 09 	call	0x128e	; 0x128e <_Z8resetLEDc>

	if( (PIND & 0x04) >> 2)
    19ec:	82 99       	sbic	0x10, 2	; 16
    19ee:	7c c0       	rjmp	.+248    	; 0x1ae8 <main+0x1c0>
    19f0:	2f ef       	ldi	r18, 0xFF	; 255
    19f2:	84 e3       	ldi	r24, 0x34	; 52
    19f4:	9c e0       	ldi	r25, 0x0C	; 12
    19f6:	21 50       	subi	r18, 0x01	; 1
    19f8:	80 40       	sbci	r24, 0x00	; 0
    19fa:	90 40       	sbci	r25, 0x00	; 0
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <main+0xce>
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <main+0xd8>
    1a00:	00 00       	nop
	setLED(0);
	_delay_ms(500);
	setLED(0);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
	
	setGlobalIntrrupt();
    1a08:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_Z17setGlobalIntrruptv>
	baseStationNumber =0;
	//setLED(1);
	//transceiver.calculateRSSI(0x73D);
	while (1)
	{
		processSerialReceivedBytes();
    1a0c:	0e 94 13 0a 	call	0x1426	; 0x1426 <_Z26processSerialReceivedBytesv>
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
    1a10:	80 e9       	ldi	r24, 0x90	; 144
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN4FIFO17getFifoFullLengthEv>
    1a18:	18 16       	cp	r1, r24
    1a1a:	19 06       	cpc	r1, r25
    1a1c:	34 f4       	brge	.+12     	; 0x1a2a <main+0x102>
		if (serial.isSerialTxEmpty())
    1a1e:	85 e9       	ldi	r24, 0x95	; 149
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <_ZN6Serial15isSerialTxEmptyEv>
    1a26:	81 11       	cpse	r24, r1
    1a28:	40 c0       	rjmp	.+128    	; 0x1aaa <main+0x182>
			if(serialTxDataBuffer.readByte(temp))
				serial.putChar(temp);
		}
			
			
		ToggleLED(0);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z9ToggleLEDc>
		if (transceiver.isReceiver())
    1a30:	85 e0       	ldi	r24, 0x05	; 5
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN11Transceiver10isReceiverEv>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	0e c0       	rjmp	.+28     	; 0x1a58 <main+0x130>
			}
			
		}
		else
		{
			setLED(2);			
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
			if (transceiver.getFifoFullLength() == 0)
    1a42:	85 e0       	ldi	r24, 0x05	; 5
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN11Transceiver17getFifoFullLengthEv>
    1a4a:	89 2b       	or	r24, r25
    1a4c:	f9 f6       	brne	.-66     	; 0x1a0c <main+0xe4>
				transceiver.changeMode();
    1a4e:	85 e0       	ldi	r24, 0x05	; 5
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN11Transceiver10changeModeEv>
    1a56:	da cf       	rjmp	.-76     	; 0x1a0c <main+0xe4>
			
		ToggleLED(0);
		if (transceiver.isReceiver())
		{
			
			if (transceiver.isPreambleDetected())
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN11Transceiver18isPreambleDetectedEv>
    1a60:	81 11       	cpse	r24, r1
    1a62:	33 c0       	rjmp	.+102    	; 0x1aca <main+0x1a2>
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
				stationInfo.stationInfoStructure.rssiBaseStation = rssivalue;
				transceiver.calculateRSSI(rssivalue);
			}
			
			if (transceiver.getFifoFullLength() > PACKET_LENGTH - 1  )
    1a64:	85 e0       	ldi	r24, 0x05	; 5
    1a66:	93 e0       	ldi	r25, 0x03	; 3
    1a68:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN11Transceiver17getFifoFullLengthEv>
    1a6c:	82 34       	cpi	r24, 0x42	; 66
    1a6e:	91 05       	cpc	r25, r1
    1a70:	68 f2       	brcs	.-102    	; 0x1a0c <main+0xe4>
			{
				resetLED(2);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	0e 94 47 09 	call	0x128e	; 0x128e <_Z8resetLEDc>
				transceiver.readReceivedPacket(receivedPacket);
    1a78:	68 e9       	ldi	r22, 0x98	; 152
    1a7a:	73 e0       	ldi	r23, 0x03	; 3
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	93 e0       	ldi	r25, 0x03	; 3
    1a80:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZN11Transceiver18readReceivedPacketEPc>
				if (packetProcessor.extractData(receivedPacket , dataLength))
    1a84:	ae 01       	movw	r20, r28
    1a86:	4f 5f       	subi	r20, 0xFF	; 255
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8a:	68 e9       	ldi	r22, 0x98	; 152
    1a8c:	73 e0       	ldi	r23, 0x03	; 3
    1a8e:	8d e8       	ldi	r24, 0x8D	; 141
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN6Packet11extractDataEPcRi>
    1a96:	88 23       	and	r24, r24
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <main+0x174>
    1a9a:	b8 cf       	rjmp	.-144    	; 0x1a0c <main+0xe4>
					receivedDataProcess(receivedPacket , dataLength);
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa0:	88 e9       	ldi	r24, 0x98	; 152
    1aa2:	93 e0       	ldi	r25, 0x03	; 3
    1aa4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_Z19receivedDataProcessPci>
    1aa8:	b1 cf       	rjmp	.-158    	; 0x1a0c <main+0xe4>
		processSerialReceivedBytes();
		
		if ((serialTxDataBuffer.getFifoFullLength() > 0 ) )
		if (serial.isSerialTxEmpty())
		{
			if(serialTxDataBuffer.readByte(temp))
    1aaa:	be 01       	movw	r22, r28
    1aac:	6d 5f       	subi	r22, 0xFD	; 253
    1aae:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab0:	80 e9       	ldi	r24, 0x90	; 144
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN4FIFO8readByteERc>
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <main+0x196>
    1abc:	b6 cf       	rjmp	.-148    	; 0x1a2a <main+0x102>
				serial.putChar(temp);
    1abe:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac0:	85 e9       	ldi	r24, 0x95	; 149
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <_ZN6Serial7putCharEc>
    1ac8:	b0 cf       	rjmp	.-160    	; 0x1a2a <main+0x102>
		if (transceiver.isReceiver())
		{
			
			if (transceiver.isPreambleDetected())
			{
				rssivalue = transceiver.adfReadback(RSSI_READBACK);
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN11Transceiver11adfReadbackEc>
				stationInfo.stationInfoStructure.rssiBaseStation = rssivalue;
    1ad4:	90 93 02 02 	sts	0x0202, r25
    1ad8:	80 93 01 02 	sts	0x0201, r24
				transceiver.calculateRSSI(rssivalue);
    1adc:	bc 01       	movw	r22, r24
    1ade:	85 e0       	ldi	r24, 0x05	; 5
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN11Transceiver13calculateRSSIEj>
    1ae6:	be cf       	rjmp	.-132    	; 0x1a64 <main+0x13c>
		_delay_ms(50);
	}
	resetLED(0);

	if( (PIND & 0x04) >> 2)
	setLED(0);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 32 09 	call	0x1264	; 0x1264 <_Z6setLEDc>
    1aee:	80 cf       	rjmp	.-256    	; 0x19f0 <main+0xc8>

00001af0 <_ZN6PacketC1Ev>:
#include "Packet.h"
#include "definition.h"
#include "GlobalVariables.h"

// default constructor
Packet::Packet()
    1af0:	fc 01       	movw	r30, r24
{
	header[0]=0x11;
    1af2:	81 e1       	ldi	r24, 0x11	; 17
    1af4:	84 83       	std	Z+4, r24	; 0x04
	preamble[0]=0x12;
    1af6:	82 e1       	ldi	r24, 0x12	; 18
    1af8:	85 83       	std	Z+5, r24	; 0x05
	preamble[1]=0x34;
    1afa:	84 e3       	ldi	r24, 0x34	; 52
    1afc:	86 83       	std	Z+6, r24	; 0x06
	preamble[2]=0x56;
    1afe:	86 e5       	ldi	r24, 0x56	; 86
    1b00:	87 83       	std	Z+7, r24	; 0x07
    1b02:	08 95       	ret

00001b04 <_ZN6PacketD1Ev>:
	//header = {0x11,0x22,0x33,0x44,0x55,0x66};
	//preamble ={0x12,0x34,0x56};
} //Packet

// default destructor
Packet::~Packet()
    1b04:	08 95       	ret

00001b06 <_ZN6Packet12createPacketEPciS0_>:
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
	unsigned char i;
	crcPacket =0;
    1b14:	dc 01       	movw	r26, r24
    1b16:	13 96       	adiw	r26, 0x03	; 3
    1b18:	1c 92       	st	X, r1
    1b1a:	1e 92       	st	-X, r1
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
	if (dataLength > DATA_LENGTH )
    1b1e:	4e 33       	cpi	r20, 0x3E	; 62
    1b20:	51 05       	cpc	r21, r1
    1b22:	88 f4       	brcc	.+34     	; 0x1b46 <_ZN6Packet12createPacketEPciS0_+0x40>
		dataLength = DATA_LENGTH;
	if (dataLength != 0 )
    1b24:	41 15       	cp	r20, r1
    1b26:	51 05       	cpc	r21, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <_ZN6Packet12createPacketEPciS0_+0x26>
    1b2a:	50 c0       	rjmp	.+160    	; 0x1bcc <_ZN6Packet12createPacketEPciS0_+0xc6>
    1b2c:	f9 01       	movw	r30, r18
    1b2e:	82 e4       	ldi	r24, 0x42	; 66
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
	{
		packetString[i]= 0x00 ;
    1b30:	11 92       	st	Z+, r1
    1b32:	81 50       	subi	r24, 0x01	; 1
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
		//packetString[21] =0xFF;
	}
	else
	for (i=0 ; i<PACKET_LENGTH ; i++ )
    1b34:	e9 f7       	brne	.-6      	; 0x1b30 <_ZN6Packet12createPacketEPciS0_+0x2a>
	{
		packetString[i]= 0x00 ;
	}
	
	
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	08 95       	ret
		//{
			//packetString[i]=preamble[i];
		//}
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1b46:	ec 01       	movw	r28, r24
    1b48:	4c 81       	ldd	r20, Y+4	; 0x04
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	40 83       	st	Z, r20
		}
		
		packetString[PACKET_HEADER_NUM ] = (dataLength >> 8);
    1b4e:	11 82       	std	Z+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1b50:	4d e3       	ldi	r20, 0x3D	; 61
    1b52:	42 83       	std	Z+2, r20	; 0x02
    1b54:	10 e4       	ldi	r17, 0x40	; 64
void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
	unsigned char i;
	crcPacket =0;
	if (dataLength > DATA_LENGTH )
		dataLength = DATA_LENGTH;
    1b56:	4d e3       	ldi	r20, 0x3D	; 61
    1b58:	50 e0       	ldi	r21, 0x00	; 0
Packet::~Packet()
{
} //~Packet

void Packet::createPacket( char *dataString ,int dataLength,char *packetString )
{
    1b5a:	00 e0       	ldi	r16, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
		packetString[PACKET_HEADER_NUM ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
		{
			crcPacket += dataString[i];
    1b60:	6b 01       	movw	r12, r22
    1b62:	ca 0e       	add	r12, r26
    1b64:	db 1e       	adc	r13, r27
    1b66:	f6 01       	movw	r30, r12
    1b68:	f0 80       	ld	r15, Z
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	c2 81       	ldd	r28, Z+2	; 0x02
    1b6e:	d3 81       	ldd	r29, Z+3	; 0x03
    1b70:	cf 0d       	add	r28, r15
    1b72:	d1 1d       	adc	r29, r1
    1b74:	d3 83       	std	Z+3, r29	; 0x03
    1b76:	c2 83       	std	Z+2, r28	; 0x02
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
    1b78:	e6 01       	movw	r28, r12
    1b7a:	e8 81       	ld	r30, Y
    1b7c:	a2 0f       	add	r26, r18
    1b7e:	b3 1f       	adc	r27, r19
    1b80:	13 96       	adiw	r26, 0x03	; 3
    1b82:	ec 93       	st	X, r30
		}
		
		packetString[PACKET_HEADER_NUM ] = (dataLength >> 8);
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
		
		for (i=0; i < dataLength ; i++)
    1b84:	0f 5f       	subi	r16, 0xFF	; 255
    1b86:	a0 2f       	mov	r26, r16
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	a4 17       	cp	r26, r20
    1b8c:	b5 07       	cpc	r27, r21
    1b8e:	44 f3       	brlt	.-48     	; 0x1b60 <_ZN6Packet12createPacketEPciS0_+0x5a>
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <_ZN6Packet12createPacketEPciS0_+0x96>
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
		{
			packetString[ i ]= 0x00;
    1b92:	f9 01       	movw	r30, r18
    1b94:	e1 0f       	add	r30, r17
    1b96:	f1 1d       	adc	r31, r1
    1b98:	10 82       	st	Z, r1
			packetString[i + PACKET_HEADER_NUM  + 2 ]= dataString[i];
		}
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH  ]= '\r';
		//packetString[i + PACKET_HEADER_NUM + PREAMBLE_LENGTH + 1 ]= '\n';
		
		for (i=(PACKET_HEADER_NUM + dataLength +2 ) ; i < (PACKET_LENGTH - 2) ; i++)
    1b9a:	1f 5f       	subi	r17, 0xFF	; 255
    1b9c:	10 34       	cpi	r17, 0x40	; 64
    1b9e:	c9 f7       	brne	.-14     	; 0x1b92 <_ZN6Packet12createPacketEPciS0_+0x8c>
		{
			packetString[ i ]= 0x00;
		}
		
		packetString[PACKET_LENGTH  - 2 ] = (crcPacket >> 8) ;
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	e0 5c       	subi	r30, 0xC0	; 192
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	13 96       	adiw	r26, 0x03	; 3
    1baa:	4c 91       	ld	r20, X
    1bac:	13 97       	sbiw	r26, 0x03	; 3
    1bae:	40 83       	st	Z, r20
		packetString[PACKET_LENGTH - 1 ] = (crcPacket & 0xFF );
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	ef 5b       	subi	r30, 0xBF	; 191
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	8c 91       	ld	r24, X
    1bba:	80 83       	st	Z, r24
	{
		packetString[i]= 0x00 ;
	}
	
	
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	08 95       	ret
		//{
			//packetString[i]=preamble[i];
		//}
		for (i=0; i < PACKET_HEADER_NUM ; i++)
		{
			packetString[i] = header[i];
    1bcc:	14 96       	adiw	r26, 0x04	; 4
    1bce:	ec 91       	ld	r30, X
    1bd0:	e9 01       	movw	r28, r18
    1bd2:	e8 83       	st	Y, r30
		}
		
		packetString[PACKET_HEADER_NUM ] = (dataLength >> 8);
    1bd4:	19 82       	std	Y+1, r1	; 0x01
		packetString[PACKET_HEADER_NUM  + 1] = (dataLength & 0xFF);
    1bd6:	4a 83       	std	Y+2, r20	; 0x02
    1bd8:	14 2f       	mov	r17, r20
    1bda:	1d 5f       	subi	r17, 0xFD	; 253
    1bdc:	be cf       	rjmp	.-132    	; 0x1b5a <_ZN6Packet12createPacketEPciS0_+0x54>

00001bde <_ZN6Packet11extractDataEPcRi>:
	
	
}

bool Packet::extractData(char *packetString ,int &dataLength)
{
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	db 01       	movw	r26, r22
bool Packet::isHeaderDetected( char *string )
{
	unsigned char i;
	for (i=0; i < PACKET_HEADER_NUM ; i++)
	{
		if (string[i] != header[i])
    1be4:	2c 91       	ld	r18, X
    1be6:	fc 01       	movw	r30, r24
    1be8:	84 81       	ldd	r24, Z+4	; 0x04
    1bea:	28 13       	cpse	r18, r24
    1bec:	41 c0       	rjmp	.+130    	; 0x1c70 <_ZN6Packet11extractDataEPcRi+0x92>
		//serialTxDataBuffer.writeString(packetString , 6);
		
	if (isHeaderDetected(packetString))
	{		
		tempDataLength |= (packetString[PACKET_HEADER_NUM] & 0xFF);
		tempDataLength <<=8;
    1bee:	11 96       	adiw	r26, 0x01	; 1
    1bf0:	3c 91       	ld	r19, X
    1bf2:	11 97       	sbiw	r26, 0x01	; 1
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
		tempDataLength |= (packetString[PACKET_HEADER_NUM + 1] & 0xFF );
    1bf6:	12 96       	adiw	r26, 0x02	; 2
    1bf8:	8c 91       	ld	r24, X
    1bfa:	12 97       	sbiw	r26, 0x02	; 2
    1bfc:	28 2b       	or	r18, r24
		
		if (tempDataLength > DATA_LENGTH )
    1bfe:	2e 33       	cpi	r18, 0x3E	; 62
    1c00:	31 05       	cpc	r19, r1
    1c02:	b0 f5       	brcc	.+108    	; 0x1c70 <_ZN6Packet11extractDataEPcRi+0x92>
		{
			//serial.putChar(2);
			return false;
		}
		
		dataLength = tempDataLength;
    1c04:	fa 01       	movw	r30, r20
    1c06:	31 83       	std	Z+1, r19	; 0x01
    1c08:	20 83       	st	Z, r18
		
		crcClaculated = calculatedCRC(packetString+PACKET_HEADER_NUM+2 , tempDataLength);
    1c0a:	6d 5f       	subi	r22, 0xFD	; 253
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	21 15       	cp	r18, r1
    1c14:	31 05       	cpc	r19, r1
    1c16:	e9 f0       	breq	.+58     	; 0x1c52 <_ZN6Packet11extractDataEPcRi+0x74>
    1c18:	e0 e0       	ldi	r30, 0x00	; 0
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
	{
		calcCRC += string[i];
    1c1e:	eb 01       	movw	r28, r22
    1c20:	c8 0f       	add	r28, r24
    1c22:	d9 1f       	adc	r29, r25
    1c24:	88 81       	ld	r24, Y
    1c26:	48 0f       	add	r20, r24
    1c28:	51 1d       	adc	r21, r1
int Packet::calculatedCRC( char *string , int strSize )
{
	unsigned char i;
	int calcCRC=0;
	
	for (i=0; i < strSize ; i++)
    1c2a:	ef 5f       	subi	r30, 0xFF	; 255
    1c2c:	8e 2f       	mov	r24, r30
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	82 17       	cp	r24, r18
    1c32:	93 07       	cpc	r25, r19
    1c34:	a4 f3       	brlt	.-24     	; 0x1c1e <_ZN6Packet11extractDataEPcRi+0x40>
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
		
		//serialTxDataBuffer.writeByte(crcClaculated);
		//serialTxDataBuffer.writeByte(crcClaculated >> 8);
		
		for (i=0; i< tempDataLength ; i++)
		packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];
    1c3c:	fd 01       	movw	r30, r26
    1c3e:	e8 0f       	add	r30, r24
    1c40:	f9 1f       	adc	r31, r25
    1c42:	83 81       	ldd	r24, Z+3	; 0x03
    1c44:	80 83       	st	Z, r24
		crcClaculated = calculatedCRC(packetString+PACKET_HEADER_NUM+2 , tempDataLength);
		
		//serialTxDataBuffer.writeByte(crcClaculated);
		//serialTxDataBuffer.writeByte(crcClaculated >> 8);
		
		for (i=0; i< tempDataLength ; i++)
    1c46:	6f 5f       	subi	r22, 0xFF	; 255
    1c48:	86 2f       	mov	r24, r22
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	82 17       	cp	r24, r18
    1c4e:	93 07       	cpc	r25, r19
    1c50:	ac f3       	brlt	.-22     	; 0x1c3c <_ZN6Packet11extractDataEPcRi+0x5e>
		packetString[i] = packetString[i + PACKET_HEADER_NUM + 2 ];

		crcRecived |= (packetString[PACKET_LENGTH  - 2 ] & 0xFF) ;
    1c52:	fd 01       	movw	r30, r26
    1c54:	e0 5c       	subi	r30, 0xC0	; 192
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
		crcRecived <<= 8;
    1c58:	90 81       	ld	r25, Z
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
		crcRecived |=(packetString[PACKET_LENGTH  - 1 ]  & 0xFF);
    1c5c:	af 5b       	subi	r26, 0xBF	; 191
    1c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c60:	2c 91       	ld	r18, X
    1c62:	bc 01       	movw	r22, r24
    1c64:	62 2b       	or	r22, r18
    1c66:	9b 01       	movw	r18, r22
		
		if (crcRecived == crcClaculated)
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	24 17       	cp	r18, r20
    1c6c:	35 07       	cpc	r19, r21
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <_ZN6Packet11extractDataEPcRi+0x94>
			//serial.putChar(1);
			return true;
		}
	}
	//serial.putChar(0);
	return false;
    1c70:	80 e0       	ldi	r24, 0x00	; 0
}
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <_ZN6Serial4initEi>:
			// Communication Parameters: 8 Data, 1 Stop, No Parity
			// USART Receiver: On
			// USART Transmitter: On
			// USART Mode: Asynchronous
			// USART Baud Rate: 19200
			UCSRA=0x00;
    1c78:	1b b8       	out	0x0b, r1	; 11
			UCSRB=0x18;
    1c7a:	88 e1       	ldi	r24, 0x18	; 24
    1c7c:	8a b9       	out	0x0a, r24	; 10
			UCSRC=0x86;
    1c7e:	86 e8       	ldi	r24, 0x86	; 134
    1c80:	80 bd       	out	0x20, r24	; 32
			UBRRH=0x00;
    1c82:	10 bc       	out	0x20, r1	; 32
	//UCSRA=0x00;
	//UCSRB=0x98;
	//UCSRC=0x86;
	//UBRRH=0x00;
	//UBRRL=0x67;
	switch (baudRate)
    1c84:	60 38       	cpi	r22, 0x80	; 128
    1c86:	85 e2       	ldi	r24, 0x25	; 37
    1c88:	78 07       	cpc	r23, r24
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <_ZN6Serial4initEi+0x1a>
    1c8c:	61 15       	cp	r22, r1
    1c8e:	7b 44       	sbci	r23, 0x4B	; 75
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <_ZN6Serial4initEi+0x20>
			// USART Baud Rate: 9600
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x33;
    1c92:	83 e3       	ldi	r24, 0x33	; 51
    1c94:	89 b9       	out	0x09, r24	; 9
    1c96:	08 95       	ret
			// USART Baud Rate: 19200
			UCSRA=0x00;
			UCSRB=0x18;
			UCSRC=0x86;
			UBRRH=0x00;
			UBRRL=0x19;
    1c98:	89 e1       	ldi	r24, 0x19	; 25
    1c9a:	89 b9       	out	0x09, r24	; 9
			break;
    1c9c:	08 95       	ret

00001c9e <_ZN6Serial7putCharEc>:
}

void Serial::putChar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
    1c9e:	5d 9b       	sbis	0x0b, 5	; 11
    1ca0:	fe cf       	rjmp	.-4      	; 0x1c9e <_ZN6Serial7putCharEc>
	// Start transmission
	UDR = data;
    1ca2:	6c b9       	out	0x0c, r22	; 12
    1ca4:	08 95       	ret

00001ca6 <_ZN6Serial15isSerialTxEmptyEv>:
}

bool Serial::isSerialTxEmpty()
{
	return (UCSRA & (_BV(UDRE)));
    1ca6:	8b b1       	in	r24, 0x0b	; 11
}
    1ca8:	85 fb       	bst	r24, 5
    1caa:	88 27       	eor	r24, r24
    1cac:	80 f9       	bld	r24, 0
    1cae:	08 95       	ret

00001cb0 <_ZN6Serial14isSerialRxFullEv>:
		putChar(pkt[i]);
}

bool Serial::isSerialRxFull()
{
	return (UCSRA & (_BV(RXC)));
    1cb0:	8b b1       	in	r24, 0x0b	; 11
}
    1cb2:	88 1f       	adc	r24, r24
    1cb4:	88 27       	eor	r24, r24
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	08 95       	ret

00001cba <_ZN11StationInfoC1Ev>:
#include "StationInfo.h"

// default constructor
StationInfo::StationInfo()
{
	structStartPointer = (char*)&stationInfoStructure;
    1cba:	fc 01       	movw	r30, r24
    1cbc:	95 af       	std	Z+61, r25	; 0x3d
    1cbe:	84 af       	std	Z+60, r24	; 0x3c
	stationInfoStructure.stationNumber = -1;
    1cc0:	2f ef       	ldi	r18, 0xFF	; 255
    1cc2:	22 83       	std	Z+2, r18	; 0x02
    1cc4:	08 95       	ret

00001cc6 <_ZN11StationInfoD1Ev>:
} //StationInfo

// default destructor
StationInfo::~StationInfo()
    1cc6:	08 95       	ret

00001cc8 <_ZN11StationInfo12calculateCRCEv>:
{
} //~StationInfo

int16_t StationInfo::calculateCRC()
{
    1cc8:	dc 01       	movw	r26, r24
    1cca:	dc 96       	adiw	r26, 0x3c	; 60
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	dd 97       	sbiw	r26, 0x3d	; 61
    1cd2:	8c e3       	ldi	r24, 0x3C	; 60
	int16_t calcCRC=0;
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
	char i;
	
	for (i=0; i < sizeof(stationInfoStructure) ; i++)
	{
		calcCRC += structStartPointer[i];
    1cd8:	91 91       	ld	r25, Z+
    1cda:	29 0f       	add	r18, r25
    1cdc:	31 1d       	adc	r19, r1
    1cde:	81 50       	subi	r24, 0x01	; 1
int16_t StationInfo::calculateCRC()
{
	int16_t calcCRC=0;
	char i;
	
	for (i=0; i < sizeof(stationInfoStructure) ; i++)
    1ce0:	d9 f7       	brne	.-10     	; 0x1cd8 <_ZN11StationInfo12calculateCRCEv+0x10>
	{
		calcCRC += structStartPointer[i];
	}
	return calcCRC;
}
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	08 95       	ret

00001ce6 <_ZN11TransceiverC1Ev>:
#include "definition.h"
#include "GlobalVariables.h"
#include "functions.h"

// default constructor
Transceiver::Transceiver()
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	ec 01       	movw	r28, r24
    1cec:	05 96       	adiw	r24, 0x05	; 5
    1cee:	0e 94 56 00 	call	0xac	; 0xac <_ZN7ADF7020C1Ev>
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	43 96       	adiw	r24, 0x13	; 19
    1cf6:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN4FIFOC1Ev>
{
	preamble[0]=0x12;
    1cfa:	82 e1       	ldi	r24, 0x12	; 18
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
	preamble[1]=0x34;
    1cfe:	84 e3       	ldi	r24, 0x34	; 52
    1d00:	8b 83       	std	Y+3, r24	; 0x03
	preamble[2]=0x56;
    1d02:	86 e5       	ldi	r24, 0x56	; 86
    1d04:	8c 83       	std	Y+4, r24	; 0x04
	
} //Transceiver
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <_ZN11TransceiverD1Ev>:

// default destructor
Transceiver::~Transceiver()
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ec 01       	movw	r28, r24
    1d12:	43 96       	adiw	r24, 0x13	; 19
    1d14:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN4FIFOD1Ev>
    1d18:	ce 01       	movw	r24, r28
    1d1a:	05 96       	adiw	r24, 0x05	; 5
{
} //~Transceiver
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
	preamble[2]=0x56;
	
} //Transceiver

// default destructor
Transceiver::~Transceiver()
    1d20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_ZN7ADF7020D1Ev>

00001d24 <_ZN11Transceiver7setModeE14TranceiverMode>:

//////////////////////////////////////////////////////////////////////////

void Transceiver::setMode( TranceiverMode mode )
{
	myadf7020.setMode(mode);
    1d24:	05 96       	adiw	r24, 0x05	; 5
    1d26:	0c 94 65 05 	jmp	0xaca	; 0xaca <_ZN7ADF70207setModeE14TranceiverMode>

00001d2a <_ZN11Transceiver11adfReadbackEc>:
	myadf7020.ADF_Program_Check();
}

unsigned int Transceiver::adfReadback( char readBackMode )
{
	return myadf7020.adfReadback(readBackMode);
    1d2a:	05 96       	adiw	r24, 0x05	; 5
    1d2c:	0c 94 47 03 	jmp	0x68e	; 0x68e <_ZN7ADF702011adfReadbackEc>

00001d30 <_ZN11Transceiver10isReceiverEv>:
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d30:	05 96       	adiw	r24, 0x05	; 5
    1d32:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN7ADF702010isReceiverEv>

00001d36 <_ZN11Transceiver10changeModeEv>:
{
	return myadf7020.isTransmitterReady();
}

void Transceiver::changeMode( void )
{
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	ec 01       	movw	r28, r24
	char tempFlag;
	
	tempFlag = resetAndStoreIntrruptFlag();
    1d42:	0e 94 02 0a 	call	0x1404	; 0x1404 <_Z25resetAndStoreIntrruptFlagv>
    1d46:	f8 2e       	mov	r15, r24
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1d48:	8e 01       	movw	r16, r28
    1d4a:	0b 5f       	subi	r16, 0xFB	; 251
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	c8 01       	movw	r24, r16
    1d50:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN7ADF702010isReceiverEv>
{
	char tempFlag;
	
	tempFlag = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
    1d54:	81 11       	cpse	r24, r1
    1d56:	17 c0       	rjmp	.+46     	; 0x1d86 <_ZN11Transceiver10changeModeEv+0x50>
		transmittedByteCounter = 0;
		//resetLED(0);
	}
	else
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_RECEIVER);
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		//if (stationInfo.stationInfoStructure.stationNumber > 20)
		//{
			//stationInfo.stationInfoStructure.stationNumber =0;
		//}
		 
		serialTxDataBuffer.clearFifo();
    1d60:	80 e9       	ldi	r24, 0x90	; 144
    1d62:	92 e0       	ldi	r25, 0x02	; 2
    1d64:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN4FIFO9clearFifoEv>
		dataBuffer.clearFifo();
    1d68:	ce 01       	movw	r24, r28
    1d6a:	43 96       	adiw	r24, 0x13	; 19
    1d6c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN4FIFO9clearFifoEv>
	}
	
	GIFR &=0x1F;
    1d70:	9a b7       	in	r25, 0x3a	; 58
    1d72:	9f 71       	andi	r25, 0x1F	; 31
    1d74:	9a bf       	out	0x3a, r25	; 58
	restoreIntrrupt(tempFlag);
    1d76:	8f 2d       	mov	r24, r15
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
		serialTxDataBuffer.clearFifo();
		dataBuffer.clearFifo();
	}
	
	GIFR &=0x1F;
	restoreIntrrupt(tempFlag);
    1d82:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <_Z15restoreIntrruptc>
	
	tempFlag = resetAndStoreIntrruptFlag();
	
	if (isReceiver())
	{
		myadf7020.adf7020_ChangeMode(TRANSCEIVER_MODE_TRANSMITTER);
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	c8 01       	movw	r24, r16
    1d8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN7ADF702018adf7020_ChangeModeE14TranceiverMode>
		//serialDataBuffer.clearFifo();
		dataBuffer.clearFifo();
    1d8e:	ce 01       	movw	r24, r28
    1d90:	43 96       	adiw	r24, 0x13	; 19
    1d92:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN4FIFO9clearFifoEv>
		//for (int i=0; i<40; ++i )
			//dataBuffer.writeByte(0xAA);
		transmittedByteCounter = 0;
    1d96:	19 82       	std	Y+1, r1	; 0x01
    1d98:	18 82       	st	Y, r1
    1d9a:	ea cf       	rjmp	.-44     	; 0x1d70 <_ZN11Transceiver10changeModeEv+0x3a>

00001d9c <_ZN11Transceiver11writePacketEPc>:
	GIFR &=0x1F;
	restoreIntrrupt(tempFlag);
}

bool Transceiver::writePacket( char *str )
{
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
	dataBuffer.writeString(str , PACKET_LENGTH );
    1da0:	ec 01       	movw	r28, r24
    1da2:	63 96       	adiw	r28, 0x13	; 19
    1da4:	42 e4       	ldi	r20, 0x42	; 66
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	ce 01       	movw	r24, r28
    1daa:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4FIFO11writeStringEPci>
	
	//write 3 byte to correct send data;
	dataBuffer.writeByte(0x00);
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	ce 01       	movw	r24, r28
    1db2:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	ce 01       	movw	r24, r28
    1dba:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4FIFO9writeByteEc>
	dataBuffer.writeByte(0x00);
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4FIFO9writeByteEc>
	
	return true;
}
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <_ZN11Transceiver17getFifoFullLengthEv>:
	//return true;
//}

int Transceiver::getFifoFullLength()
{
	return dataBuffer.getFifoFullLength();
    1dce:	43 96       	adiw	r24, 0x13	; 19
    1dd0:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_ZN4FIFO17getFifoFullLengthEv>

00001dd4 <_ZN11Transceiver18readReceivedPacketEPc>:

bool Transceiver::readReceivedPacket( char *str )
{
	int byte_num;
	char data;
	byte_num = dataBuffer.readString(str , PACKET_LENGTH );
    1dd4:	42 e4       	ldi	r20, 0x42	; 66
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	43 96       	adiw	r24, 0x13	; 19
    1dda:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN4FIFO10readStringEPci>
	//serial.put16Bit(byte_num);
	//serialTxDataBuffer.writeByte(0xBB);
	//serialTxDataBuffer.writeString(str , PACKET_LENGTH );
	
	return true;
}
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	08 95       	ret

00001de2 <_ZN11Transceiver18isPreambleDetectedEv>:
	return ;
}

bool Transceiver::isPreambleDetected()
{
	return 	 myadf7020.isPreambleDetected();
    1de2:	05 96       	adiw	r24, 0x05	; 5
    1de4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_ZN7ADF702018isPreambleDetectedEv>

00001de8 <_ZN11Transceiver13calculateRSSIEj>:
}

void Transceiver::calculateRSSI(uint16_t rssi)
{
	 myadf7020.calculateRSSI(rssi);
    1de8:	05 96       	adiw	r24, 0x05	; 5
    1dea:	0c 94 70 07 	jmp	0xee0	; 0xee0 <_ZN7ADF702013calculateRSSIEj>

00001dee <__vector_2>:

//////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////
ISR(INT1_vect)
{
    1dee:	1f 92       	push	r1
    1df0:	0f 92       	push	r0
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	0f 92       	push	r0
    1df6:	11 24       	eor	r1, r1
    1df8:	2f 93       	push	r18
    1dfa:	3f 93       	push	r19
    1dfc:	4f 93       	push	r20
    1dfe:	5f 93       	push	r21
    1e00:	6f 93       	push	r22
    1e02:	7f 93       	push	r23
    1e04:	8f 93       	push	r24
    1e06:	9f 93       	push	r25
    1e08:	af 93       	push	r26
    1e0a:	bf 93       	push	r27
    1e0c:	ef 93       	push	r30
    1e0e:	ff 93       	push	r31
}

void Transceiver::receiveInt1ISR()
{
	unsigned char temp;
	myadf7020.receiveInt1ISR();
    1e10:	8a e0       	ldi	r24, 0x0A	; 10
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN7ADF702014receiveInt1ISREv>
	if (myadf7020.isNewDataAvailable())
    1e18:	8a e0       	ldi	r24, 0x0A	; 10
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7ADF702018isNewDataAvailableEv>
    1e20:	81 11       	cpse	r24, r1
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <__vector_2+0x58>

///////////////////////////////////////////////////
ISR(INT1_vect)
{
	transceiver.receiveInt1ISR();
}
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti
	myadf7020.receiveInt1ISR();
	if (myadf7020.isNewDataAvailable())
	{
	//if(receivedByteCounter < PACKET_LENGTH )
	//{
		temp = (myadf7020.receiveByte() );
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN7ADF702011receiveByteEv>
		temp ^= 0xAA;
    1e4e:	6a ea       	ldi	r22, 0xAA	; 170
    1e50:	68 27       	eor	r22, r24
	
		dataBuffer.writeByte(temp);
    1e52:	88 e1       	ldi	r24, 0x18	; 24
    1e54:	93 e0       	ldi	r25, 0x03	; 3
    1e56:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4FIFO9writeByteEc>
	//}
		receivedByteCounter++;
    1e5a:	80 91 17 03 	lds	r24, 0x0317
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	80 93 17 03 	sts	0x0317, r24
		
		//serial.putChar(temp);
		
		//receivedByteCounter = PACKET_LENGTH ;
		if (receivedByteCounter > PACKET_LENGTH - 1  )
    1e64:	82 34       	cpi	r24, 0x42	; 66
    1e66:	f0 f2       	brcs	.-68     	; 0x1e24 <__vector_2+0x36>
		{
			receivedByteCounter = 0;
    1e68:	10 92 17 03 	sts	0x0317, r1
			myadf7020.clearPreaambleDetect();			
    1e6c:	8a e0       	ldi	r24, 0x0A	; 10
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN7ADF702020clearPreaambleDetectEv>
    1e74:	d7 cf       	rjmp	.-82     	; 0x1e24 <__vector_2+0x36>

00001e76 <__vector_3>:
{
	transceiver.receiveInt1ISR();
}

ISR(INT2_vect)
{
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	2f 93       	push	r18
    1e82:	3f 93       	push	r19
    1e84:	4f 93       	push	r20
    1e86:	5f 93       	push	r21
    1e88:	6f 93       	push	r22
    1e8a:	7f 93       	push	r23
    1e8c:	8f 93       	push	r24
    1e8e:	9f 93       	push	r25
    1e90:	af 93       	push	r26
    1e92:	bf 93       	push	r27
    1e94:	ef 93       	push	r30
    1e96:	ff 93       	push	r31

}

void Transceiver::receiveInt2ISR()
{
	myadf7020.receiveInt2ISR();
    1e98:	8a e0       	ldi	r24, 0x0A	; 10
    1e9a:	93 e0       	ldi	r25, 0x03	; 3
    1e9c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN7ADF702014receiveInt2ISREv>
}

ISR(INT2_vect)
{
	transceiver.receiveInt2ISR();
}
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
// Timer 1 output compare A interrupt service routine
//interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	TCNT1H=0x00;
    1eee:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=44;	
    1ef0:	8c e2       	ldi	r24, 0x2C	; 44
    1ef2:	8c bd       	out	0x2c, r24	; 44
	TCNT0 = 0;
    1ef4:	12 be       	out	0x32, r1	; 50
	myadf7020.sendByte(data);
}

bool Transceiver::isReceiver()
{
	return myadf7020.isReceiver();
    1ef6:	8a e0       	ldi	r24, 0x0A	; 10
    1ef8:	93 e0       	ldi	r25, 0x03	; 3
    1efa:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN7ADF702010isReceiverEv>

void Transceiver::transmitTimerISR()
{
	char temp;
	
	if (isReceiver())
    1efe:	88 23       	and	r24, r24
    1f00:	f9 f0       	breq	.+62     	; 0x1f40 <__vector_7+0x7e>
	TCNT1L=44;	
	TCNT0 = 0;
	
	transceiver.transmitTimerISR();
	
	if (serial.isSerialRxFull())
    1f02:	85 e9       	ldi	r24, 0x95	; 149
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN6Serial14isSerialRxFullEv>
    1f0a:	88 23       	and	r24, r24
    1f0c:	29 f0       	breq	.+10     	; 0x1f18 <__vector_7+0x56>
	{
		serialRxDataBuffer.writeByte(UDR);//TODO: read serial
    1f0e:	6c b1       	in	r22, 0x0c	; 12
    1f10:	8b e1       	ldi	r24, 0x1B	; 27
    1f12:	92 e0       	ldi	r25, 0x02	; 2
    1f14:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4FIFO9writeByteEc>
	}
}
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	ff 91       	pop	r31
    1f20:	ef 91       	pop	r30
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti
	
	if (isReceiver())
		return;
	else
	{
		myadf7020.transmitTimerISR();
    1f40:	8a e0       	ldi	r24, 0x0A	; 10
    1f42:	93 e0       	ldi	r25, 0x03	; 3
    1f44:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN7ADF702016transmitTimerISREv>
	return myadf7020.isReceiver();
}

bool Transceiver::isTransmitterReady()
{
	return myadf7020.isTransmitterReady();
    1f48:	8a e0       	ldi	r24, 0x0A	; 10
    1f4a:	93 e0       	ldi	r25, 0x03	; 3
    1f4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN7ADF702018isTransmitterReadyEv>
		return;
	else
	{
		myadf7020.transmitTimerISR();

		if (isTransmitterReady())
    1f50:	88 23       	and	r24, r24
    1f52:	b9 f2       	breq	.-82     	; 0x1f02 <__vector_7+0x40>
		{
			if (transmittedByteCounter > 39 )
    1f54:	80 91 05 03 	lds	r24, 0x0305
    1f58:	90 91 06 03 	lds	r25, 0x0306
    1f5c:	88 32       	cpi	r24, 0x28	; 40
    1f5e:	91 05       	cpc	r25, r1
    1f60:	64 f4       	brge	.+24     	; 0x1f7a <__vector_7+0xb8>
			{
				dataBuffer.readByte(temp);
				temp ^= 0xAA;
			}
			else if (transmittedByteCounter == 37)
    1f62:	85 32       	cpi	r24, 0x25	; 37
    1f64:	91 05       	cpc	r25, r1
    1f66:	31 f1       	breq	.+76     	; 0x1fb4 <__vector_7+0xf2>
				temp = preamble[0];
			else if (transmittedByteCounter == 38)
    1f68:	86 32       	cpi	r24, 0x26	; 38
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	39 f1       	breq	.+78     	; 0x1fbc <__vector_7+0xfa>
				temp = preamble[1];
			else if (transmittedByteCounter == 39)
    1f6e:	87 97       	sbiw	r24, 0x27	; 39
    1f70:	e9 f0       	breq	.+58     	; 0x1fac <__vector_7+0xea>
				temp = preamble[2];
			else
				temp = 0xAA;
    1f72:	8a ea       	ldi	r24, 0xAA	; 170
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6a ea       	ldi	r22, 0xAA	; 170
    1f78:	0b c0       	rjmp	.+22     	; 0x1f90 <__vector_7+0xce>

		if (isTransmitterReady())
		{
			if (transmittedByteCounter > 39 )
			{
				dataBuffer.readByte(temp);
    1f7a:	be 01       	movw	r22, r28
    1f7c:	6f 5f       	subi	r22, 0xFF	; 255
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	88 e1       	ldi	r24, 0x18	; 24
    1f82:	93 e0       	ldi	r25, 0x03	; 3
    1f84:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN4FIFO8readByteERc>
				temp ^= 0xAA;
    1f88:	69 81       	ldd	r22, Y+1	; 0x01
    1f8a:	8a ea       	ldi	r24, 0xAA	; 170
    1f8c:	68 27       	eor	r22, r24
    1f8e:	69 83       	std	Y+1, r22	; 0x01
	
}

void Transceiver::sendByte( char data )
{
	myadf7020.sendByte(data);
    1f90:	8a e0       	ldi	r24, 0x0A	; 10
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN7ADF70208sendByteEc>
			else
				temp = 0xAA;
			
			sendByte((temp ));
			
			transmittedByteCounter ++ ;
    1f98:	80 91 05 03 	lds	r24, 0x0305
    1f9c:	90 91 06 03 	lds	r25, 0x0306
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	90 93 06 03 	sts	0x0306, r25
    1fa6:	80 93 05 03 	sts	0x0305, r24
    1faa:	ab cf       	rjmp	.-170    	; 0x1f02 <__vector_7+0x40>
			else if (transmittedByteCounter == 37)
				temp = preamble[0];
			else if (transmittedByteCounter == 38)
				temp = preamble[1];
			else if (transmittedByteCounter == 39)
				temp = preamble[2];
    1fac:	60 91 09 03 	lds	r22, 0x0309
    1fb0:	69 83       	std	Y+1, r22	; 0x01
    1fb2:	ee cf       	rjmp	.-36     	; 0x1f90 <__vector_7+0xce>
			{
				dataBuffer.readByte(temp);
				temp ^= 0xAA;
			}
			else if (transmittedByteCounter == 37)
				temp = preamble[0];
    1fb4:	60 91 07 03 	lds	r22, 0x0307
    1fb8:	69 83       	std	Y+1, r22	; 0x01
    1fba:	ea cf       	rjmp	.-44     	; 0x1f90 <__vector_7+0xce>
			else if (transmittedByteCounter == 38)
				temp = preamble[1];
    1fbc:	60 91 08 03 	lds	r22, 0x0308
    1fc0:	69 83       	std	Y+1, r22	; 0x01
    1fc2:	e6 cf       	rjmp	.-52     	; 0x1f90 <__vector_7+0xce>

00001fc4 <__tablejump2__>:
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31

00001fc8 <__tablejump__>:
    1fc8:	05 90       	lpm	r0, Z+
    1fca:	f4 91       	lpm	r31, Z
    1fcc:	e0 2d       	mov	r30, r0
    1fce:	09 94       	ijmp

00001fd0 <__eerd_byte_m32a>:
    1fd0:	e1 99       	sbic	0x1c, 1	; 28
    1fd2:	fe cf       	rjmp	.-4      	; 0x1fd0 <__eerd_byte_m32a>
    1fd4:	9f bb       	out	0x1f, r25	; 31
    1fd6:	8e bb       	out	0x1e, r24	; 30
    1fd8:	e0 9a       	sbi	0x1c, 0	; 28
    1fda:	99 27       	eor	r25, r25
    1fdc:	8d b3       	in	r24, 0x1d	; 29
    1fde:	08 95       	ret

00001fe0 <__eeupd_byte_m32a>:
    1fe0:	26 2f       	mov	r18, r22

00001fe2 <__eeupd_r18_m32a>:
    1fe2:	e1 99       	sbic	0x1c, 1	; 28
    1fe4:	fe cf       	rjmp	.-4      	; 0x1fe2 <__eeupd_r18_m32a>
    1fe6:	9f bb       	out	0x1f, r25	; 31
    1fe8:	8e bb       	out	0x1e, r24	; 30
    1fea:	e0 9a       	sbi	0x1c, 0	; 28
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	0d b2       	in	r0, 0x1d	; 29
    1ff0:	02 16       	cp	r0, r18
    1ff2:	31 f0       	breq	.+12     	; 0x2000 <__eeupd_r18_m32a+0x1e>
    1ff4:	2d bb       	out	0x1d, r18	; 29
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	e2 9a       	sbi	0x1c, 2	; 28
    1ffc:	e1 9a       	sbi	0x1c, 1	; 28
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	08 95       	ret

00002002 <__do_global_dtors>:
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	c6 e5       	ldi	r28, 0x56	; 86
    2006:	d0 e0       	ldi	r29, 0x00	; 0
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <__do_global_dtors+0x10>
    200a:	fe 01       	movw	r30, r28
    200c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__tablejump__>
    2010:	22 96       	adiw	r28, 0x02	; 2
    2012:	c8 35       	cpi	r28, 0x58	; 88
    2014:	d1 07       	cpc	r29, r17
    2016:	c9 f7       	brne	.-14     	; 0x200a <__do_global_dtors+0x8>
    2018:	f8 94       	cli

0000201a <__stop_program>:
    201a:	ff cf       	rjmp	.-2      	; 0x201a <__stop_program>
